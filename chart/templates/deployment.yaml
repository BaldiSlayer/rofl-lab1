apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 2
  revisionHistoryLimit: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: "{{ .Values.image.repository }}/tfl-lab1-backend:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8085
          env:
            - name: TGTOKEN
              valueFrom:
                secretKeyRef:
                  name: backend-secrets
                  key: tg-api-key
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: username
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db
            - name: GHTOKEN
              valueFrom:
                secretKeyRef:
                  name: backend-secrets
                  key: github-token

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: interpret
spec:
  replicas: 1
  revisionHistoryLimit: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: interpret
  template:
    metadata:
      labels:
        app: interpret
    spec:
      containers:
        - name: interpret
          image: "{{ .Values.image.repository }}/tfl-lab1-interpret:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8081
          readinessProbe:
            httpGet:
              path: /ping
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: formalize
spec:
  replicas: 1
  revisionHistoryLimit: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: formalize
  template:
    metadata:
      labels:
        app: formalize
    spec:
      containers:
        - name: formalize
          image: "{{ .Values.image.repository }}/tfl-lab1-formalize:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /ping
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm
spec:
  replicas: 1
  revisionHistoryLimit: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: llm
  template:
    metadata:
      labels:
        app: llm
    spec:
      containers:
        - name: llm
          image: "{{ .Values.image.repository }}/tfl-lab1-llm:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8100
          readinessProbe:
            httpGet:
              path: /ping
              port: 8100
            initialDelaySeconds: 30
            periodSeconds: 20
          env:
            - name: MISTRAL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: llm-secrets
                  key: api-key

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres-deployment
spec:
  replicas: 1
  revisionHistoryLimit: 4
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: public.ecr.aws/docker/library/postgres:17
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: llm-balancer
data:
  {{- range $path, $d := .Files.Glob "../deploy/llm-balancer/**.conf.template" }}
  {{ $path }}: |-
  {{- $d | toString}}
  {{ end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: llm-balancer
  name: llm-balancer-deployment
spec:
  replicas: 1
  revisionHistoryLimit: 4
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: llm-balancer
  template:
    metadata:
      labels:
        app: llm-balancer
    spec:
      containers:
        - name: llm-balancer
          image: public.ecr.aws/nginx/nginx:stable-alpine
          env:
            - name: NGINX_PORT
              value: "80"
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /etc/nginx/templates
              readOnly: true
              name: llm-balancer-templates
      volumes:
        - name: llm-balancer-templates
          configMap:
            name: llm-balancer
            items:
              - key: "files/llm-balancer/default.conf.template"
                path: "default.conf.template"
              - key: "files/llm-balancer/get_chat_response.conf.template"
                path: "get_chat_response.conf.template"
