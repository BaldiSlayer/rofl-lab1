version: '3'
services:
  llm:
    build:
      dockerfile: dockerfiles/llm.dockerfile
    container_name: llm
    image: stewkk/tfl-lab1-llm:latest
    volumes:
      - ./LLM/app/utils/Mistral/config.py:/api/app/utils/Mistral/config.py
    healthcheck:
      test: curl --fail 'http://llm:8100/ping' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
  backend:
    build:
      dockerfile: ./dockerfiles/backend.dockerfile
    environment:
      TGTOKEN: "${TGTOKEN}"
    env_file: ".env"
    container_name: backend
    image: stewkk/tfl-lab1-backend:latest
    depends_on:
      llm:
        condition: service_healthy
      interpret:
        condition: service_healthy
      formalize:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
  interpret:
    build:
      dockerfile: ./dockerfiles/interpret.dockerfile
    container_name: interpret
    image: stewkk/tfl-lab1-interpret:latest
    healthcheck:
      test: curl --fail 'http://interpret:8081/ping' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
  formalize:
    build:
      dockerfile: ./dockerfiles/formalize.dockerfile
    container_name: formalize
    image: stewkk/tfl-lab1-formalize:latest
    healthcheck:
      test: curl --fail 'http://formalize:8081/ping' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
  postgresql:
    image: docker.io/bitnami/postgresql:14
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_PASSWORD="${POSTGRESQL_PASSWORD}"
      - POSTGRESQL_USERNAME=postgresql
    env_file: ".env"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
  pgbouncer:
    image: docker.io/bitnami/pgbouncer:1
    ports:
      - 6432:6432
    environment:
      - POSTGRESQL_HOST=postgresql
      - POSTGRESQL_PASSWORD="${POSTGRESQL_PASSWORD}"
      - POSTGRESQL_USERNAME=postgresql
    env_file: ".env"
    healthcheck:
      test: 'env PGPASSWORD="$$POSTGRESQL_PASSWORD" psql -p 6432 -U "$$POSTGRESQL_USERNAME" pgbouncer -b -c "SHOW USERS" >/dev/null'
      interval: 5s
      timeout: 5s
      retries: 6
    depends_on:
      postgresql:
        condition: service_healthy

volumes:
  postgresql_data:
    driver: local
