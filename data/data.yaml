- question: Что представляет собой язык, распознаваемый недетерминированным конечным автоматом (НКА)?
  answer: > 
    Язык, распознаваемый недетерминированным конечным автоматом (НКА) – это все такие слова, 
    по которым существует хотя бы один путь из стартовой вершины в терминальную.
  author: Лисов Алексей

- question: Дан регулярный язык, опиши алгоритм нахождения кратчайшего слова, принадлежащего этому регулярному языку
  answer: > 
    Регулярный язык может быть задан с помощью конечного автомата. 
    Так как автомат конечен, то мы можем его обойти (пройти через все состояния) за конечное время. 
    Так как нам нужно найти самое короткое слово, то эта задача сводится к тому, что нам необходимо 
    найти кратчайший путь от стартовой вершины до какой-либо терминальной. По определению это 
    можно сделать с помощью поиска в ширину (bfs, breadth-first search). Поиск в ширину - алгоритм, находящий 
    все кратчайшие пути от заданной вершины в невзвешенном графе. Запускаем поиск в ширину и выйдем из него, 
    когда пришли в терминальное состояние. Так как нам нужно явно найти кратчайшее слово, то после этого делаем 
    восстановление ответа. Это можно сделать используя дополнительную структуру данных (например массив prev), для того, 
    чтобы для каждого состояния v хранить состояние u, из которого мы в него пришли. Мы можем пройти от найденной 
    вершины по массиву prev, пока не придем в начальное состояние. Записав все переходы мы получим кратчайшее слово, 
    принадлежащее регулярному языку.
  author: Лисов Алексей

- question: Опиши алгоритм подсчета количества слов определенной длины в заданном регулярном языке
  answer: > 
    Обозначим регулярный язык за L и пусть длина слов, количество которых мы хотим найти - l.
    Так как язык L регулярен, то мы можем построить соответствующий ему конечный автомат A.
    Решим задачу с помощью динамического программирования. Пусть a_(q,i) – количество слов длины i, переводящих 
    автомат A из начального состояния q0 в состояние q. 
    Чтобы пересчитать эту величину, нужно просуммировать значения динамического программирования
    из предыдущего по длине слоя для всех состояний, из которых есть ребро в состояние q. Ответом является
    сумма элементов столбца, отвечающего за длину l, соответствующих терминальным вершинам.
  author: Лисов Алексей

- question: Какими являются языки недетерминированных автоматов с магазинной памятью?
  answer: > 
    Языки недетерминированных автоматов с магазинной памятью являются контекстно-свободными.
    То есть эти языки могут быть заданы с помощью контекстно свободных грамматик.
  author: Лисов Алексей

- question: Какая структура данных может описать магазинную память у автомата с магазинной памятью?
  answer: Магазинная память у автомата с магазинной памятью является стеком.
  author: Лисов Алексей

- question: Опиши алгоритм нахождения эпсилон замыкания для каждой из вершин автомата?
  answer: >
    ε-замыкание состояния q – это множество состояний, достижимых из q только по ε-переходам. 
    Соотсветственно эпсилон замыкание для каждой из вершин автомата можно предподсчитать с помощью поиска в глубину 
    (dfs) для каждой вершины.
  author: Лисов Алексей

- question: Дай определение произведения двух автоматов
  answer: >
    Прямым произведением двух ДКА A1=⟨Σ1,Q1,s1,T1,δ1⟩ и A2=⟨Σ2,Q2,s2,T2,δ2⟩ называется ДКА 
    A=⟨Σ,Q,s,T,δ⟩, где: 
    1) Σ = Σ1∪Σ2, то есть он работает над пересечением алфавитов двух данных автоматов 
    2) Q = Q1×Q2, множество пар состояниий включает в себя состояния обоих автоматов 
    3) s =⟨s1,s2), стартуем с символов в обоих автоматах 
    4) T=T1×T2, терминальные состояния включают в себя терминальные состояния обоих автоматов 
    5) δ(⟨q1,q2⟩,c)=⟨δ1(q1,c),δ2(q2,c)⟩, то есть переходим по символу в обоих автоматах"
  author: Лисов Алексей

- question: Как из недетерминированного конечного автомата A сделать pushdown automat B?
  answer: >
    Для этого нужно заменить переход из состояния q в состояние p по символу x на такой же переход, 
    только добавить z_0/z_0, где z_0 это дно стека. Из этого следует, что регулярные языки являются подмножеством 
    МП-автоматных языков (языков автоматов с магазинной памятью).
  author: Лисов Алексей

- question: Теорема Клини (англ. Kleene's theorem)
  answer: >
    Теорема Клини (англ. Kleene's theorem) гласит о том, что множество языков, принимаемых детерминированным конечным автоматом совпадает с 
    множеством языком, принимаемых академическим регулярным выражением.
  author: Лисов Алексей

- question: Какой язык называется префиксным (беспрефиксным)
  answer: > 
    Язык L называется префиксным, если для любого слова w не равного слову v из L не верно, что w – префикс v. 
    Также такие языки называют беспрефиксными.
  author: Лисов Алексей

- question: >
    Что можно сказать о языке L, который принимается детерминированным конечным автоматом 
    с магазинной памятью по пустому стеку
  answer: > 
    Это значит, что язык L принимается детерминированным конечным автоматом с магазинной памятью по терминальному 
    состоянию, а также язык L – префиксный (то есть если для любого w не равного v из языка L не верно,
    что w – префикс v).
  author: Лисов Алексей

- question: >
    Является ли регулярным язык Дика (англ. Dyck's language) с единственным типом скобок?
    (язык Дика - множество правильных скобочных структур вместе с пустой структурой, 
    образующее язык над алфавитом {a,b}.)
  answer: > 
    Язык Дика (англ. Dyck's language) не является регулярным.
    Докажем с помощью леммы о накачке. Предположим, что он регулярный, тогда по лемме о накачке существует 
    n, являющееся длиной накачки. Возьмём последовательность из n открывающих, а затем n закрывающих скобок. 
    Для неё существуют соответствующие x, y, z из леммы о накачке. Но так как |xy| <= n, то y 
    состоит только из открывающих скобок, причём по условию леммы y не пустая. А значит при i = 2 в строке xy^iz 
    получится больше открывающих скобок, чем закрывающих, то есть это будет не правильной скобочной последовательностью. 
    Получили противоречие. Следовательно язык Дика с единственным типом скобок не является регулярным.
  author: Лисов Алексей

- question: >
    Является ли контекстно-свободным языком разность контекстно-свободного и регулярного языка?
  answer: > 
    Да, разность контекстно-свободного и регулярного языка является контекстно-свободным языком.
  author: Лисов Алексей

- question: >
    Что такое переход машины Тьюринга?
  answer: > 
    Переход машины Тьюринга — это функция, зависящая от состояния конечного управления и обозреваемого символа. 
    За один переход машина Тьюринга должна выполнить следующие действия: изменить состояние, 
    записать ленточный символ в обозреваемую клетку, сдвинуть головку влево или вправо.
  author: Дмитрий Теньшов

- question: >
    Какие языки допускаются при помощи машины Тьюринга?
  answer: > 
    Языки, допустимые с помощью машины Тьюринга, называются рекурсивно перечислимыми, или РП-языками.
  author: Дмитрий Теньшов

- question: >
    Опишите прием «память в состоянии» машины Тьюринга.
  answer: > 
    Память в состоянии — конечное управление можно использовать не только для представления позиции в «Программе» машины Тьюринга, 
    но и для хранения конечного объема данных.
  author: Дмитрий Теньшов

- question: >
    Опишите прием «Подпрограммы» машины Тьюринга.
  answer: > 
    Подпрограмма машины Тьюринга представляет собой множество состояний, выполняющее некоторый полезный процесс. 
    Это множество включает в себя стартовое состояние и еще одно состояние, 
    которое не имеет переходов и служит состоянием «возврата» для передачи управления какому-либо множеству состояний, 
    вызвавшему данную подпрограмму. «Вызов» подпрограммы возникает везде, где есть переход в ее начальное состояние.
  author: Дмитрий Теньшов

- question: >
    Можно ли запомнить позицию ленточной головки в позиции управления у машины Тьюринга?
  answer: > 
    Хотя позиции конечны в каждый момент времени, всё множество позиций может быть и бесконечным. 
    Если состояние должно представлять любую позицию головки, то в состоянии должен быть компонент данных, 
    имеющий любое целое в качестве значения. Из-за этого компонента множество состояний должно быть бесконечным, 
    даже если только конечное число состояний используется в любой конечный момент времени. Определение же машин Тьюринга требует, 
    чтобы множество состояний было конечным. Таким образом, запомнить позицию ленточной головки в конечном управлении нельзя.
  author: Дмитрий Теньшов

- question: >
    Что такое счетчиковая машина?
  answer: > 
    Счетчиковые машины — это класс машин, обладающий возможностью запоминать конечное число целых чисел (счетчиков) 
    и совершать различные переходы в зависимости от того, какие из счетчиков равны 0 (если таковые вообще есть). 
    Счетчиковая машина может только прибавить 1 к счетчику или вычесть 1 из него, 
    но отличить значения двух различных ненулевых счетчиков она не способна.
  author: Дмитрий Теньшов

- question: >
    Какой язык допускается счетчиковой машиной?
  answer: > 
    Каждый язык, допускаемый счетчиковой машиной, рекурсивно перечислим. Причина в том, 
    что счетчиковые машины являются частным случаем магазинных, а магазинные — частным случаем многоленточных машин Тьюринга, 
    которые по теореме допускают только рекурсивно перечислимые языки.
  author: Дмитрий Теньшов

- question: >
    Допускается ли любой рекурсивно перечислимый язык двухсчетчиковой машиной?
  answer: > 
    Для имитации машины Тьюринга и, следовательно, для допускания любого рекурсивно перечислимого языка, достаточно двух счетчиков. 
    Для обоснования этого утверждения вначале доказывается, что достаточно трех счетчиков, 
    а затем три счетчика имитируются с помощью двух.
  author: Дмитрий Теньшов

- question: >
    Что такое универсальная машина Тьюринга?
  answer: > 
    Универсальной машиной Тьюринга называют машину Тьюринга, которая может заменить собой любую машину Тьюринга. 
    Получив на вход программу и входные данные, она вычисляет ответ, который вычислила бы по входным данным машина Тьюринга, 
    чья программа была дана на вход.
  author: Дмитрий Теньшов

- question: >
    Какое время необходимо многоленточной машине Тьюринга для имитации шагов компьютера?
  answer: > 
    Рассмотрим компьютер, обладающий следующими свойствами: у него есть только инструкции, 
    увеличивающие максимальную длину слова не более чем на один; у него есть только инструкции, 
    которые многоленточная машина Тьюринга может выполнить на словах длиной k за O(k^2) или меньшее число шагов. 
    Шаг — это выполнение одной инструкции. Таким образом, выполнение n шагов работы компьютера можно проимитировать 
    на многоленточной машине Тьюринга с использованием не более O(n^3) шагов.
  author: Дмитрий Теньшов

- question: >
    Как связаны мощности следующих машин Тьюринга: многодорожечная машина Тьюринга, 
    машина Тьюринга с односторонней лентой, многоленточная машина Тьюринга, недетерминированная машина Тьюринга?
  answer: > 
    Многодорожечная машина Тьюринга, машина Тьюринга с односторонней лентой, многоленточная машина Тьюринга 
    и недетерминированная машина Тьюринга, несмотря на различия в их конструкции или правилах работы, 
    обладают одинаковой вычислительной мощностью, то есть способны вычислить одни и те же классы функций. 
    Различия между видами машин Тьюринга (например, между машинами с одним или несколькими лентами) 
    могут повлиять на эффективность вычислений (время или пространство), но не на саму вычислительную мощность.
  author: Дмитрий Теньшов

- question: >
    Если проблема P1 неразрешима и ее можно свести к проблеме P2, то является ли проблема P2 неразрешимой?
  answer: > 
    Если проблему P1 можно свести к проблеме P2 и если P1 неразрешима, то и P2 неразрешима.
  author: Дмитрий Теньшов

- question: >
    Что такое рандомизированная машина Тьюринга?
  answer: > 
    Рандомизированная машина Тьюринга — это вариант многоленточной машины Тьюринга. Первая лента, 
    как обычно для многоленточных машин, содержит вход. Вторая лента также начинается непустыми клетками. 
    В принципе, вся она содержит символы 0 и 1, выбранные с вероятностью 1/2. Вторая лента называется случайной лентой. 
    Третья и последующие, если используются, вначале пусты и при необходимости выступают как рабочие.
  author: Дмитрий Теньшов


- question: "Рекурсивные языки."
  answer: >
    Языки, допускаемые машинами Тьюринга, называются рекурсивно-перечислимыми (РП),
    а РП-языки, допускаемые МТ, которые всегда останавливаются, — рекурсивными. “Разрешимость” есть 
    синоним “рекурсивности”, однако языки чаще называются “рекурсивными”, а проблемы (которые 
    представляют собой языки, интерпретируемые как вопросы) — “разрешимыми”. 
    Если язык не является рекурсивным, то проблема, которую выражает этот язык, называется “неразрешимой”.
    Рекурсивный язык позволяет построить разрешающую функцию: т.е. МТ, возвращающую один из двух результатов (да-нет), и корректно завершающую работу.
  author: "Филимонов Михаил"


- question: "Рекурсивно-перечислимые языки. Примеры языков, которые являются рекурсивно-перечислимыми, но не рекурсивными."
  answer: >
    Язык L является рекурсивно-перечислимым (РП-языком), если L = L(M) для некоторой машины Тьюринга M.
    Проблема останова машины Тьюринга является РП, но не рекурсивной. В действительности, определенная А. М. Тьюрингом 
    машина допускала, не попадая в допускающее состояние, а останавливаясь. Для МТ 
    M можно определить H(M) как множество входов w, на которых M останавливается 
    независимо от того, допускает ли M вход w. Тогда проблема останова состоит в опре 
    делении множества таких пар (M, w), у которых w принадлежит H(M). Это еще один 
    пример проблемы/языка, которая является РП, но не рекурсивной.
  author: "Филимонов Михаил"


- question: "Что такое язык диагонализации L_d"
  answer: >
    Язык диагонализации L_d — это множество всех цепочек w_i, не принадлежащих L(M_i).
    Понятие M_i, “i-й машины Тьюринга”. Это машина Тьюринга M, кодом которой является i-я двоичная цепочка w_i.
    В язык L_d  входит каждая цепочка в алфавите {0, 1}, которая, будучи проинтерпретированной как код МТ, не принадлежит языку этой МТ.
    Язык L_d является хорошим примером не РП-языка, т.е. его не допускает ни одна машина Тьюринга.
  author: "Филимонов Михаил"


- question: "Является ли язык L_d рекурсивно-перечислимым"
  answer: >
    Язык L_d не является рекурсивно-перечислимым, т.е. не существует машины Тьюринга, которая допускала бы L_d.
    Доказательство. Допустим, что L_d = L(M) для некоторой МТ M.
    Так как L_d — язык над алфавитом {0, 1}, M должна содержаться в построенной нами последовательности машин Тьюринга,
    поскольку эта последовательность содержит все МТ с входным алфавитом {0, 1}.
    Следовательно, в ней есть, по крайней мере, один код машины M, скажем, i, т.е. M = M_i.
    Понятие M_i, “i-й машины Тьюринга”. Это МТ M, кодом которой является i-я двоичная цепочка w_i.
    Выясним теперь, принадлежит ли w_i языку L_d.
    Если w_i принадлежит L_d, то M_i допускает w_i. Но тогда (по определению L_d) w_i не принадлежит L_d,
    так как L_d содержит лишь такие w_j, для которых M_j не допускает w_j.
    Точно так же, если w_i не принадлежит L_d, то M_i не допускает w_i.
    Но тогда (по определению L_d) w_i принадлежит L_d.
    Поскольку w_i не может одновременно и принадлежать, и не принадлежать L_d, приходим к противоречию с нашим предположением о том, что M существует.
    Таким образом, L_d не является рекурсивно-перечислимым языком.
  author: "Филимонов Михаил"


- question: "Почему языки 'рекурсивные'?"
  answer: >
    Рекурсивные функции были введены в 30-х годах XX века С. К. Клини. 
    Это название закрепилось за одним из наиболее распространённых вариантов 
    уточнения общего понятия арифметического алгоритма, то есть такого алгоритма, 
    допустимые исходные данные которого представляют собой системы натуральных чисел, 
    а возможные результаты применения — натуральные числа.
    Языки называются рекурсивными, если они являются рекурсивным подмножеством набора всех 
    возможных конечных последовательностей по алфавиту языка. Тезис Чёрча — Тьюринга: любая функция, 
    которая может быть вычислена физическим устройством, может быть вычислена машиной Тьюринга. То есть
    рекурсивные функции вычисляют те же классы алгоритмов, что и машины Тьюринга. Эквивалентно, формальный язык 
    является рекурсивным, если существует машина Тьюринга, которая при вводе конечной 
    последовательности символов всегда останавливается и принимает её, если она 
    принадлежит языку, и останавливается и отвергает её в противном случае.
  author: "Филимонов Михаил"



- question: >
    Почему универсальный язык L_u является рекурсивно-перечислимым, но не рекурсивным.
  answer: >
    Язык L_u состоит из цепочек, интерпретируемых как код
    МТ, к которому дописан ее вход. Цепочка принадлежит L_u, если эта МТ до
    пускает данный вход.
    Язык L_u является рекурсивно-перечислимым. Допустим, что L_u рекурсивен. Тогда по теореме дополнение L_u (дополнение L_u) 
    также рекурсивный язык. Но если существует МТ M, допускающая L_u, то, используя описанный ниже метод, 
    можно построить МТ, допускающую L_d. Язык диагонализации L_d — это множество всех цепочек w_i, не принадлежащих L(M_i).
    Понятие M_i, “i-й машины Тьюринга”. Это МТ M, кодом которой является i-я двоичная цепочка w_i.
    В язык L_d  входит каждая цепочка в алфавите {0, 1}, которая, будучи проинтерпретированной как код МТ, не принадлежит языку этой МТ.
    Поскольку нам известно, что L_d не является РП, приходим к 
    противоречию с предположением, что язык L_u является рекурсивным. Предположим, что L(M) = L_u. Можно 
    преобразовать МТ M в МТ M', которая допускает L_d с помощью следующих действий: 1. M' преобразует 
    входную цепочку w в w111w. Легче это сделать, используя для копии w вторую ленту, и затем 
    преобразовать двухленточную МТ в одноленточную. 2. M' имитирует M на новом входе. Если w есть w_i 
    в нашем перечислении, то M' определяет, допускает ли M_i вход w_i. Поскольку M допускает L_u, то она 
    допускает тогда и только тогда, когда M_i не допускает w_i, т.е. когда w_i принадлежит L_d. Таким образом, 
    M' допускает w тогда и только тогда, когда w принадлежит L_d. Поскольку по теореме машины M' не существует, 
    приходим к выводу, что язык L_u не является рекурсивным.
  author: "Филимонов Михаил"


- question: >
    Является ли язык, состоящий из кодов всех машин Тьюринга, 
    которые допускают хотя бы одну цепочку, L_ne рекурсивно-перечислимым/рекурсивным?
  answer: >
    L_ne – непустой язык состоит из кодов всех машин Тьюринга, которые допускают хотя бы одну цепочку. 
    Он рекурсивно-перечислим, но не рекурсивный. Чтобы доказать РП, достаточно предъявить МТ, допускающую L_ne. 
    Проще всего это сделать, описав недетерминированную МТ M. Работа M заключается в следующем: 1. На вход M подается 
    код МТ M_i. 2. Используя недетерминизм, M угадывает вход w, который, возможно, допускается M_i. 
    3. M проверяет, допускает ли M_i свой вход w. В этой части M может моделировать работу универсальной МТ U, 
    допускающей L_u (язык L_u состоит из цепочек, интерпретируемых как код
    МТ, к которому дописан ее вход. Цепочка принадлежит L_u, если эта МТ до
    пускает данный вход). 4. Если M_i допускает w, то и M допускает свой вход, т.е. M_i. Понятие M_i, “i-й машины 
    Тьюринга”. Это МТ M, кодом которой является i-я двоичная цепочка w_i. В этот язык входит каждая цепочка 
    в алфавите {0, 1}, которая, будучи проинтерпретированной как код МТ, не принадлежит языку этой МТ. 
    Таким образом, если M_i допускает хотя бы одну цепочку, то M угадает ее (среди прочих, конечно) и допустит M_i. 
    Если же L(M_i) = ∅, то ни одна из угаданных w не допускается M_i, и M не допустит M_i. Таким образом, L(M) = L_ne.
  author: "Филимонов Михаил"


- question: >
    Является ли язык L_e, состоящий из кодов всех МТ, языки которых пусты, рекурсивно-перечислимым/рекурсивным?
  answer: >
    L_e – пустой язык состоит из кодов всех МТ, языки которых пусты. Он не рекурсивно-перечислим.
  author: "Филимонов Михаил"


- question: >
    Теорема Райса
  answer: >
    Свойство называется тривиальным, если оно либо пустое (т.е. никакой язык вообще
    ему не удовлетворяет), либо содержит все РП-языки (рекурсивно-перечислимые). В противном случае свойство назы
    вается нетривиальным. 
    Теорема Райса: Всякое нетривиальное свойство языков, допускаемых МТ, является неразрешимым. Например, множество кодов 
    машин Тьюринга, допускающих пустой язык, согласно теореме Райса является неразрешимым. В действительности 
    этот язык не является РП, хотя его дополнение — множество кодов МТ, допускающих хотя бы одну цепочку, — 
    является РП, но не рекурсивным.
  author: "Филимонов Михаил"


- question: >
    Существует ли такой вход для заданной машины Тьюринга, 
    при обработке которого машина выполняет более пяти переходов, 
    прежде чем достигнет состояния останова (либо завершится, либо зациклится)?
  answer: >
    Алгоритм решения становится очевидным, если заметить, что, когда МТ делает пять переходов, 
    она обозревает не более девяти клеток вокруг начальной позиции головки. Поэтому можно проимитировать 
    пять переходов МТ на любом из конечного числа входов, длина которых не более девяти. Если все эти 
    имитации не достигают останова, то делается вывод, что на любом входе данная МТ совершает более пяти переходов.
  author: "Филимонов Михаил"


- question: >
    Что такое проблема соответствий Поста.
  answer: >
    Экземпляр проблемы соответствий Поста (ПСП) состоит из двух списков равной длины в некотором алфавите Σ. 
    Как правило, мы будем называть их списками A и B, и писать A = w_1, w_2, …, w_k и B = x_1, x_2, …, x_k при 
    некотором целом k. Для каждого i пара (w_i, x_i) называется парой соответствующих цепочек. Мы говорим, что 
    экземпляр ПСП имеет решение, если существует последовательность из одного или нескольких целых чисел 
    i_1, i_2, …, i_m, которая, если считать эти числа индексами цепочек и выбрать соответствующие цепочки из 
    списков A и B, дает одну и ту же цепочку, т.е. w_i_1w_i_2…w_i_m = x_i_1xi_2…x_i_m. В таком случае последовательность 
    i_1, i_2, …, i_m называется решающей последовательностью, или просто решением, данного экземпляра ПСП.
  author: "Филимонов Михаил"

- question: >
    Что такое модифицированная проблема соответствий Поста.
  answer: >
    Модифицированной проблемой соответствий Поста, или МПСП. 
    В модифицированной ПСП на решение накладывается дополнительное требование, 
    чтобы первой парой в решении была пара первых элементов списков A и B. 
    Более формально, экземпляр МПСП состоит из двух списков A = w_1, w_2, …, w_k 
    и B = x_1, x_2, …, x_k, и решением является последовательность из 0 или 
    нескольких целых чисел i_1, i_2, …, i_m, при которой 
    w_1w_i_1w_i_2…w_i_m = x_1x_i_1x_i_2…x_i_m. Отметим, что цепочки обязательно начинаются парой (w_1, x_1), 
    хотя индекс 1 даже не указан в качестве начального элемента решения. Кроме того, в отличие от ПСП, 
    решение которой содержит хотя бы один элемент, решением МПСП может быть и пустая последовательность (когда w_1 = x_1).
  author: "Филимонов Михаил"


- question: >
    Разрешима ли ПСП/проблема соответствий Поста
  answer: >
    Заданы два списка, содержащие одинаковое количество цепочек. 
    Спрашивается, можно ли, выбирая последовательности соответствующих 
    цепочек из этих двух списков, построить путем их конкатенации одну 
    и ту же цепочку. ПСП является важным примером неразрешимой проблемы. 
    Сводимость ПСП к ряду других проблем обеспечивает доказательство их неразрешимости
  author: "Филимонов Михаил"


- question: >
    Разрешим ли вопрос о неоднозначности КС-грамматики (контекстно-свободной грамматики)
  answer: >
    Вопрос о неоднозначности КС-грамматики (контекстно-свободной грамматики) неразрешим. 
    Неразрешимые проблемы, связанные с контекстно-свободными языками. 
    Посредством сведения ПСП(проблема соответствий Поста) к вопросу об определении некоторых свойств КС-грамматики можно доказать неразрешимость многих вопросов 
    о КС-языках или их грамматиках. В силу неразрешимости ПСП это сведение доказывает неразрешимость про
    блемы неоднозначности КС-грамматики.  Так же, например, о включении одного КС-языка в 
    другой или о пустоте пересечения двух КС-языков."
  author: "Филимонов Михаил"


- question: >
    Что называется нейтральным элементом операции в регулярных выражениях?
  answer: >
    Нейтральный (единичный) элемент в контексте операций в регулярных выражениях — это элемент,
    для которого верно: если данная операция применяется к единичному элементу и некоторому выражению,
    то результат равен этому выражению. Для регулярных выражений нейтральные элементы зависят от конкретного типа операции:
    1. Конкатенация: Нейтральным элементом для конкатенации является пустая строка (обозначается ε).
    При конкатенации любой строки с ε результат остается неизменным.
    2. Объединение (дизъюнкция): Для операции объединения нейтральным элементом является пустое множество (обозначается ∅).
    Объединение любого выражения с ∅ не изменяет его.
  author: "Захарин Сергей"


- question: >
    Что называется нулевым элементом (аннулятором) операции в регулярных выражениях?
  answer: >
    Нулевой элемент (или аннулятор) в контексте операций в регулярных выражениях — это элемент,
    который при применении операции с другим выражением всегда возвращает сам нулевой элемент. В алгебре нулевой элемент обнуляет результат операции,
    независимо от второго аргумента. В контексте регулярных выражений это понятие также применимо, и оно зависит от типа операции:
    1. Конкатенация: Для конкатенации нулевым элементом является пустое множество (обозначаемое ∅). При конкатенации любого выражения с ∅ результатом всегда будет ∅.
    2. Объединение (дизъюнкция): Для операции объединения (дизъюнкции) нулевого элемента как такового не существует.
    Объединение с ∅ даёт исходное выражение, а не ∅, то есть ∅ здесь является нейтральным, а не нулевым элементом.
  author: "Захарин Сергей"


- question: >
    В каком случае два регулярных выражения с переменными являются эквивалентными?
  answer: >
    Два выражения с переменными являются эквивалентными, если при подстановке любых языков вместо переменных оба выражения представляют один и тот же язык.
  author: "Захарин Сергей"


- question: >
    Какие операторы регулярных выражений ассоциативны? Коммутативны? Дистрибутивны? Идемпотентны?
  answer: >
    Объединение и конкатенация ассоциативны. Коммутативно только объединение. Конкатенация дистрибутивна относительно объединения.
    Объединение идемпотентно.
  author: "Захарин Сергей"


- question: >
    Закон идемпотентности операции объединения для регулярных выражений
  answer: >
    Закон идемпотентности операции объединения утверждает, что объединение двух одинаковых выражений можно заменить одним таким выражением.
  author: "Захарин Сергей"


- question: >
    Что такое обращение строки в формальных языках?
  answer: >
    Строку также часто называют словом. Обращением строки (a_1)(a_2)...(a_n) называется строка, записанная в обратном порядке, т.е. (a_n)(a_n-1)...(a_1).
    Обращение w обозначается w^R. Таким образом, например, (0010)^R есть 0100, а ε^R = ε.
  author: "Захарин Сергей"


- question: >
    Что такое обращение языка L?
  answer: >
    Обращение языка L, обозначаемое L^R, состоит из всех строк, являющихся реверсами (обращениями) строк из исходного языка L.
    То есть, если L — это язык, состоящий из строк w_1, w_2, ..., w_n, то обращение этого языка L^R включает строки, полученные путём инвертирования каждой из строк языка L.
    Например, если L = {001, 10, 111}, то L^R = {100, 01, 111}.
  author: "Захарин Сергей"


- question: >
    Что такое гомоморфизм строк в регулярных языках?
  answer: >
    Строку также часто называют словом. Гомоморфизм строк — это такая функция на множестве строк, являющаяся расширением функции отображения символов алфавита в строки относительно операции конкатенации.
  author: "Захарин Сергей"


- question: >
    Как рекурсивно определяется регулярное выражение?
  answer: >
    Регулярное выражение над алфавитом Σ = {c_1, c_2, …, c_k} — способ порождения языка над Σ. Определяется рекурсивно следующим образом:
    Для любого i слово c_i является регулярным выражением, задающим язык из одного слова ci. ε является регулярным выражением, задающим язык из одной пустой
    строки, а ∅ — пустой язык. Если a_1 и a_2 являются регулярными выражениями, задающими языки L_1 и L_2 соответственно, то (a_1)|(a_2) — регулярное выражение,
    задающее L_1 ⋃ L_2. Если a_1 и a_2 являются регулярными выражениями, задающими языки L_1 и L_2 соответственно, то (a_1)(a_2) — регулярное выражение,
    задающее L_1L_2. Если a_1 является регулярным выражением, задающим язык L_1, то (a_1)* — регулярное выражение, задающее (L_1)*.
  author: "Захарин Сергей"


- question: >
    Что такое замыкание Клини и где оно используется в регулярных выражениях?
  answer: >
    Итерация (“звездочка”, или замыкание Клини) языка L обозначается L* и представляет собой множество всех тех цепочек, которые можно образовать путем
    конкатенации любого количества цепочек из L. При этом допускаются повторения, т.е. одна и та же цепочка из L может быть выбрана для конкатенации более одного
    раза. Например, если L = {0, 1}, то L* — это все цепочки, состоящие из нулей и единиц. Если L = {0, 11}, то в L* входят цепочки из нулей и единиц,
    содержащие четное количество единиц, например, цепочки 011, 11110 или ε, и не входят цепочки 01011 или 101. Более формально язык L* можно представить
    как бесконечное объединение L^i, где L^0 = ε, L^1 = L и Li для i>1 равен LL...L(конкатенация i копий L).
  author: "Захарин Сергей"


- question: >
    Лемма о разрастании для контекстно-свободных языков
  answer: >
    Также называется леммой о накачке для контекстно-свободных языков. Пусть L — контекстно-свободный язык над алфавитом Σ, тогда существует такое натуральное n, что для любого слова ω, принадлежащего L, длины не меньше n
    найдутся слова u, v, x, y, z, принадлежащие Σ*, для которых верно: uvxyz = ω, vy ≠ ε, |vxy| <= n и ∀k >= 0 u(v^k)x(y^k)z ∈ L. Иначе говоря, любую
    достаточно длинную цепочку в КС-языке можно разбить на пять частей так, что повторение второй и четвёртой частей произвольное количество раз (возможно, 0)
    не приведут к выходу за пределы языка.
  author: "Захарин Сергей"


- question: >
    Относительно каких операций замкнуты регулярные языки?
  answer: >
    Регулярные языки замкнуты относительно следующих операций:
    1. Объединение
    2. Пересечение
    3. Дополнение
    4. Разность
    5. Обращение
    6. Итерация (звездочка)
    7. Конкатенация
    8. Гомоморфизм (подстановка цепочек вместо символов языка)
    9. Обратный гомоморфизм.
  author: "Захарин Сергей"


- question: >
    Законы регулярных выражений, связанные с единичным элементом и нулевым элементом
  answer: >
    Для регулярных выражений существует три закона, связанных с этими понятиями.
    • ∅ + L = L + ∅ = L. Этот закон утверждает, что ∅ является единицей объединения.
    • εL = Lε = L. Этот закон гласит, что ε является единицей конкатенации.
    • ∅L = L∅ = ∅. Этот закон утверждает, что ∅ является нулевым элементом конкатенации.
  author: "Захарин Сергей"

- question: >
    Какие существуют приемы интерпретации ленты и конечного управления машины Тьюринга?
  answer: >
    Существует три приема интерпретации ленты и конечного управления машины Тьюринга: память в состоянии, многодорожечные ленты, подпрограммы.
  author: Пишикина Мария

- question: >
    Опишите прием «Многодорожечные ленты» в машине Тьюринга.
  answer: >
    При использовании приема «Многодорожечные ленты» рассматривается лента машины Тьюринга, образованная несколькими дорожками. 
    Каждая дорожка может хранить один символ (в одной клетке), и алфавит машины Тьюринга состоит из кортежей, с одним компонентом для каждой «дорожки».
  author: Пишикина Мария

- question: >
    Существуют ли не рекурсивно перечислимые языки, допускаемые многоленточными машинами Тьюринга?
  answer: >
    Каждый язык, допускаемый многоленточной машиной Тьюринга, рекурсивно перечислим.
  author: Пишикина Мария

- question: >
    Какое время необходимо одноленточной машине Тьюринга для имитации переходов многоленточной машины Тьюринга?
  answer: >
    Время, необходимое одноленточной машине Тьюринга для имитации n переходов многоленточной машины Тьюринга, есть O(n^2).
  author: Пишикина Мария

- question: >
    Что такое «мультистековая (многомагазинная) машина»?
  answer: >
    Мультистековая (многомагазинная) машина представляет собой детерминированный МП-автомат (или машина с магазинной памятью) с несколькими магазинами. Он получает свои входные данные, как и МП-автомат, из некоторого их источника, 
    а не с ленты или из магазина, как машина Тьюринга. Мультистековая машина имеет конечное управление, то есть конечное множество состояний, и конечный магазинный алфавит, используемый для всех магазинов. 
    Переход мультистековой машины основывается на состоянии, входном символе и верхних символах всех магазинов.
  author: Пишикина Мария

- question: >
    Как называется язык, который допускается односчетчиковой машиной?
  answer: >
    «Односчетчиковые машины» — это класс машин, которые могут запоминать значение одного целого числа («счетчика») и совершать различные переходы в зависимости от того, равен ли счетчик 0. 
    Односчетчиковая машина может только прибавить 1 к счетчику или вычесть 1 из него, но не способна различать различные ненулевые значения счетчика.
    Каждый язык, допускаемый односчетчиковой машиной, является КС-языком. Контекстно-свободный (КС) язык — это язык, задаваемый контекстно-свободной грамматикой. 
    Контекстно-свободной грамматикой называется грамматика, у которой в левых частях всех правил стоят только одиночные нетерминалы.
  author: Пишикина Мария

- question:
    Можно ли имитировать машину Тьюринга на компьютере?
  answer: >
    Имитация машины Тьюринга на компьютере в принципе возможна, если допустить, что для имитации значащей части ленты существует потенциально бесконечный запас сменных запоминающих устройств вроде диска. 
    Поскольку физические ресурсы, необходимые для создания дисков, конечны, данный довод сомнителен. Однако, поскольку пределы памяти Вселенной неизвестны или, без сомнения, обширны, 
    предположение о бесконечности ресурсов (как для ленты машины Тьюринга) является практически реалистичным и в целом допустимо.
  author: Пишикина Мария

- question: >
    Какое время необходимо одноленточной машине Тьюринга для имитации переходов компьютера?
  answer: >
    Машина Тьюринга может имитировать n шагов компьютера за O(n^6) своих шагов.
  author: Пишикина Мария

- question: >
    Почему язык, допускающийся в недетерминированных машинах Тьюринга, также допускается и обычной детерминированной машиной Тьюринга?
  answer: >
    Несмотря на кажущуюся большую мощность недетерминированных машин в связи с тем, что они выполняют несколько возможных вычислений сразу 
    (требуя только, чтобы хоть одно из них заканчивалось в допускающем состоянии), любой язык, допускающийся недетерминированной машиной Тьюринга, 
    также допускается и обычной детерминированной машиной Тьюринга, поскольку она может моделировать любой недетерминированный переход, делая многократные копии состояния, если встречается неоднозначность.
  author: Пишикина Мария

- question: >
    Как машина Тьюринга имитирует реальный компьютер?
  answer: >
    Машина Тьюринга может имитировать память и управление реального компьютера путем использования одной ленты для записи всех элементов памяти и их содержимого — регистров, основной памяти, дисков и других запоминающих устройств. 
    Таким образом, можно быть уверенным, что все, не выполнимое машиной Тьюринга, не может быть сделано и компьютером.
  author: Пишикина Мария

- question: >
    Какая проблема может возникнуть при допуске языка в рандомизированную машину Тьюринга?
  answer: >
    Имея дело с рандомизированными машинами Тьюринга, нужно быть более аккуратным с тем, что значит допускание входа такой машиной; становится возможным, что машина Тьюринга не определяет функции математически корректно (т.е. независимо от рандомизированных данных). 
    Проблема в том, что при анализе действий рандомизированной машины Тьюринга со входом приходится рассматривать все возможные случайные последовательности на второй ленте. Вполне возможно, что машина Тьюринга 
    допускает при одних случайных последовательностях, но отвергает при других; в действительности, если рандомизированная машина Тьюринга должна делать что-то более эффективно, чем детерминированная машина Тьюринга, 
    то существенно, чтобы различные последовательности на рандомизированной ленте приводили к различному поведению.
  author: Пишикина Мария

- question: >
    Перечисли возможные операции над машинами Тьюринга.
  answer: >
    1) Композиция (суперпозиция) машин Тьюринга - пусть две машины Тьюринга X и Y вычисляют функции f(P) и g(P) соответственно, тогда можно построить машину Тьюринга T = Y(X), вычисляющую суперпозицию функций g(f(P)). 
    2) Разветвление машин Тьюринга - пусть две машины Тьюринга X и Y вычисляют функции f(P) и g(P) соответственно, причём множеством значений функции f(P) является множество {0, 1}, тогда можно построить машину Тьюринга T = X->Y, 
    которая перерабатывает слово P в g(P), если f(P)=1 и оставляет его без изменений если f(P)=0. 
    3) Цикл машин Тьюринга - пусть две машины Тьюринга X и Y вычисляют функции f(P) и g(P) соответственно, причём множеством значений функции f(P) является множество {0, 1}, тогда можно построить машину Тьюринга T = X∘Y, которая 
    выполняет следующую последовательность действий: 
      1 - вычисляет f(P) и если f(P)=1, то вычисляет новое значение P=g(P), а если f(P)=0, то переходит к заключительному состоянию с выходным словом P; 
      2 - повторяет действие 1 до тех пор пока для очередного значения P не будет выполнено f(P)=0.
  author: Пишикина Мария

- question: >
    Что такое самоприменимая машина Тьюринга?
  answer: >
    Машина Тьюринга называется самоприменимой, если она останавливается, когда в качестве входного слова для неё используется описание самой машины.
  author: Пишикина Мария

- question: >
    Как реализуется алгоритм для проверки принадлежности слова w к языку L в детерминированном конечном автомате (сокр. ДКА)?
  answer: > 
    Обозначив head(aw) = a и tail(aw) = w для a ∈ Σ и w ∈ Σ*, алгоритм выглядит следующим образом: MemDFA[A](w, q). 
    Вход: детерминированный конечный автомат (сокр. ДКА) A = (Q, Σ, δ, q₀, F), состояние q ∈ Q, слово w ∈ Σ*. 
    Выход: возвращает true, если w ∈ L(q), иначе false.
    1. Если w = ε, то возвращает q ∈ F.
    2. Иначе возвращает Member[A](δ(q, head(w)), tail(w)).
    Сложность алгоритма: O(|w|).
  author: Шиятов Наиль

- question: >
    Как реализуется операция дополнения языка в детерминированном конечном автомате (сокр. ДКА)?
  answer: > 
    Реализация операции дополнения для детерминированного конечного автомата (сокр. ДКА) проста. Поскольку ДКА имеет единственный прогон для каждого слова, который принимается, если автомат достигает заключительного состояния, можно просто поменять местами заключительные и незаключительные состояния. Таким образом, если слово не принималось в исходном автомате, оно будет принято в дополненном автомате, и наоборот. Этот алгоритм имеет линейную сложность:
    Вход: ДКА A = (Q, Σ, δ, q₀, F).
    Выход: ДКА B = (Q′, Σ, δ′, q′₀, F′) с L(B) = L(A)̅.
    1. Q′ ← Q; δ′ ← δ; q′₀ ← q₀; F′ ← ∅.
    2. Для всех q ∈ Q:
       - Если q ∉ F, добавить q в F′.
  author: Шиятов Наиль

- question: >
    Почему операция дополнения для детерминированного конечного автомата (сокр. ДКА) сохраняет минимальность автомата?
  answer: > 
    Операция дополнения для детерминированного конечного автомата (сокр. ДКА) сохраняет минимальность, потому что каждое состояние дополненного автомата Comp(A) распознаёт дополнение языка, которое распознавало то же состояние в исходном автомате A. Если состояния исходного автомата A распознают попарно разные языки, то и состояния автомата Comp(A) также будут распознавать разные языки. Согласно следствию, ДКА минимален, если его состояния распознают различные языки.
  author: Шиятов Наиль

- question: >
    Какова цель и структура универсального алгоритма для выполнения бинарных булевых операций над языками, распознаваемыми детерминированным конечным автоматом (сокр. ДКА)?
  answer: > 
    Цель универсального алгоритма заключается в том, чтобы, принимая два детерминированных конечных автомата (сокр. ДКА), распознающих языки L₁ и L₂, и бинарную булевую операцию, возвращать ДКА, распознающий результат применения этой операции к языкам L₁ и L₂. Алгоритм обозначается как BinOp[♢](A₁, A₂).
    Вход: ДКА A₁ = (Q₁, Σ, δ₁, q₀₁, F₁), A₂ = (Q₂, Σ, δ₂, q₀₂, F₂).
    Выход: ДКА A = (Q, Σ, δ, Q₀, F) с L(A) = L(A₁) ♢ L(A₂).
    1. Q, δ, F ← ∅.
    2. q₀ ← [q₀₁, q₀₂].
    3. W ← {q₀}.
    4. пока W ≠ ∅ делай:
       - выбрать [q₁, q₂] из W.
       - добавить [q₁, q₂] в Q.
       - если (q₁ ∈ F₁) ♢ (q₂ ∈ F₂), то добавить [q₁, q₂] в F.
       - для каждого a ∈ Σ делай:
          - q₀₁ ← δ₁(q₁, a); q₀₂ ← δ₂(q₂, a).
          - если [q₀₁, q₀₂] ∉ Q, то добавить [q₀₁, q₀₂] в W.
          - добавить ([q₁, q₂], a, [q₀₁, q₀₂]) в δ.
  author: Шиятов Наиль

- question: >
    Каково количество состояний у результирующего детерминированного конечного автомата (сокр. ДКА) при выполнении бинарной булевой операции над двумя ДКА, и в каких случаях минимальность не сохраняется?
  answer: > 
    Выходной детерминированный конечный автомат (сокр. ДКА) от алгоритма BinOp будет иметь O(|Q₁| ⋅ |Q₂|) состояний, независимо от выполняемой булевой операции. Для демонстрации достижимости этого предела можно рассмотреть алфавит Σ = {a} и язык Multₙ, который включает слова длиной, кратной n. Минимальный ДКА для языка Multₙ представляет собой цикл из n состояний, где начальное состояние также является единственным заключительным. Для любых двух взаимно простых чисел n₁ и n₂ выполняется равенство Multₙ₁ ∩ Multₙ₂ = Mult(n₁ ⋅ n₂), что означает, что ДКА для Mult(n₁ ⋅ n₂) будет иметь не менее n₁ ⋅ n₂ состояний. Однако в общем случае минимальность не сохраняется: произведение двух минимальных ДКА может не быть минимальным. Например, минимальный ДКА для регулярного языка L ∩ L имеет одно состояние, в то время как результат построения произведения будет иметь то же количество состояний, что и минимальный ДКА для L.
  author: Шиятов Наиль

- question: >
    Как определяется, что детерминированный конечный автомат (сокр. ДКА) принимает пустой язык, и какова сложность алгоритма проверки?
  answer: > 
    Детерминированный конечный автомат (сокр. ДКА) принимает пустой язык тогда и только тогда, когда у него нет заключительных состояний. Алгоритм Empty(A) возвращает true, если множество заключительных состояний F пусто, и false в противном случае. Если в реализации используется булевая переменная для хранения информации о наличии заключительных состояний, то сложность алгоритма составляет O(1). Если требуется выполнить линейный поиск по множеству состояний, чтобы проверить F = ∅, то сложность будет O(|Q|), где |Q| — это количество состояний автомата.
  author: Шиятов Наиль

- question: >
    Как определяется, что детерминированный конечный автомат (сокр. ДКА) принимает универсальный язык Σ∗, и какова сложность алгоритма проверки?
  answer: > 
    Детерминированный конечный автомат (сокр. ДКА) принимает универсальный язык Σ* тогда и только тогда, когда все его состояния являются заключительными. Алгоритм UnivDFA(A) возвращает true, если множество заключительных состояний F совпадает с множеством всех состояний Q. Если автомат находится в нормальной форме, сложность алгоритма составляет O(1). В противном случае сложность будет O(|Q|), где |Q| — это количество состояний автомата.
  author: Шиятов Наиль

- question: >
    Как алгоритм проверяет, что язык, распознаваемый одним детерминированным конечным автоматом (сокр. ДКА), является подмножеством языка, распознаваемого другим ДКА?
  answer: > 
    Алгоритм проверяет, что язык L(A₁), распознаваемый детерминированным конечным автоматом (сокр. ДКА) A₁, является подмножеством языка L(A₂), распознаваемого ДКА A₂, с помощью построения параллельного автомата [A₁, A₂]. Для каждого состояния [q₁, q₂] автомата проверяется, что если состояние q₁ заключительное в A₁ (q₁ ∈ F₁), то q₂ также должно быть заключительным в A₂ (q₂ ∈ F₂). Если найдено состояние, где q₁ ∈ F₁, а q₂ ∉ F₂, алгоритм возвращает false, что означает, что L(A₁) ⊈ L(A₂). В противном случае, если таких состояний не найдено, алгоритм возвращает true, подтверждая, что L(A₁) ⊆ L(A₂). Сложность алгоритма зависит от количества состояний и алфавита.
  author: Шиятов Наиль

- question: >
    Как проверяется равенство языков двух детерминированных конечных автоматов (сокр. ДКА)?
  answer: > 
    Равенство языков двух детерминированных конечных автоматов (сокр. ДКА) L(A₁) = L(A₂) проверяется с помощью симметрической разности L(A₁) Δ L(A₂). Если симметрическая разность пуста, то языки равны. Алгоритм EqDFA модифицирует алгоритм InclDFA, проверяя, что для состояний [q₁, q₂] выполняется одно из следующих условий: если q₁ ∈ F₁ и q₂ ∉ F₂, или если q₁ ∉ F₁ и q₂ ∈ F₂, то возвращается false, что означает, что языки не равны. В противном случае возвращается true.
  author: Шиятов Наиль

- question: >
    Какой альтернативный подход существует для проверки равенства двух детерминированных конечных автоматов (сокр. ДКА), помимо алгоритма EqDFA?
  answer: > 
    Альтернативный подход заключается в минимизации двух детерминированных конечных автоматов (сокр. ДКА) A₁ и A₂, а затем проверке, являются ли они изоморфными. Проверка изоморфизма может быть пропущена, если применить алгоритм наигрубейшего стабильного уточнения (англ. CSR, coarsest stable refinement) к объединению двух недетерминированных конечных автоматов (сокр. НКА) A₁ ∪ A₂ и разделить состояния на блоки. Языки равны, если начальные состояния обоих автоматов находятся в одном блоке после завершения алгоритма.
  author: Шиятов Наиль

- question: >
    Какая сложность проверки равенства языков двух детерминированных конечных автоматов (сокр. ДКА) с использованием алгоритма Хопкрофта для вычисления наигрубейшего стабильного уточнения (англ. CSR, coarsest stable refinement)?
  answer: > 
    Если используется алгоритм Хопкрофта для вычисления наигрубейшего стабильного уточнения (англ. CSR, coarsest stable refinement), то проверка равенства языков может быть выполнена за время O(n log n), где n — это сумма состояний автоматов A₁ и A₂.
  author: Шиятов Наиль

- question: >
    Какие два важных преимущества имеет алгоритм EqDFA по сравнению с минимизацией автоматов?
  answer: > 
    Первое преимущество заключается в том, что алгоритм EqDFA работает "на лету" (on-the-fly), позволяя тестировать равенство языков, пока строятся автоматы A₁ и A₂, и останавливать работу при нахождении различий. Второе преимущество — это возможность модифицировать EqDFA так, чтобы он возвращал свидетельство (witness), то есть слово, которое находится в симметрической разности L(A₁) и L(A₂), если языки не равны.
  author: Шиятов Наиль