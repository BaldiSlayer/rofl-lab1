- question: Что представляет собой язык, распознаваемый недетерминированным конечным автоматом (НКА)?
  answer: > 
    Язык, распознаваемый недетерминированным конечным автоматом (НКА) – это все такие слова, 
    по которым существует хотя бы один путь из стартовой вершины в терминальную.
  author: Лисов Алексей

- question: Дан регулярный язык, опиши алгоритм нахождения кратчайшего слова, принадлежащего этому регулярному языку
  answer: > 
    Регулярный язык может быть задан с помощью конечного автомата. 
    Так как автомат конечен, то мы можем его обойти (пройти через все состояния) за конечное время. 
    Так как нам нужно найти самое короткое слово, то эта задача сводится к тому, что нам необходимо 
    найти кратчайший путь от стартовой вершины до какой-либо терминальной. По определению это 
    можно сделать с помощью поиска в ширину (bfs, breadth-first search). Поиск в ширину - алгоритм, находящий 
    все кратчайшие пути от заданной вершины в невзвешенном графе. Запускаем поиск в ширину и выйдем из него, 
    когда пришли в терминальное состояние. Так как нам нужно явно найти кратчайшее слово, то после этого делаем 
    восстановление ответа. Это можно сделать используя дополнительную структуру данных (например массив prev), для того, 
    чтобы для каждого состояния v хранить состояние u, из которого мы в него пришли. Мы можем пройти от найденной 
    вершины по массиву prev, пока не придем в начальное состояние. Записав все переходы мы получим кратчайшее слово, 
    принадлежащее регулярному языку.
  author: Лисов Алексей

- question: Опиши алгоритм подсчета количества слов определенной длины в заданном регулярном языке
  answer: > 
    Обозначим регулярный язык за L и пусть длина слов, количество которых мы хотим найти - l.
    Так как язык L регулярен, то мы можем построить соответствующий ему конечный автомат A.
    Решим задачу с помощью динамического программирования. Пусть a_(q,i) – количество слов длины i, переводящих 
    автомат A из начального состояния q0 в состояние q. 
    Чтобы пересчитать эту величину, нужно просуммировать значения динамического программирования
    из предыдущего по длине слоя для всех состояний, из которых есть ребро в состояние q. Ответом является
    сумма элементов столбца, отвечающего за длину l, соответствующих терминальным вершинам.
  author: Лисов Алексей

- question: Какими являются языки недетерминированных автоматов с магазинной памятью?
  answer: > 
    Языки недетерминированных автоматов с магазинной памятью являются контекстно-свободными.
    То есть эти языки могут быть заданы с помощью контекстно свободных грамматик.
  author: Лисов Алексей

- question: Какая структура данных может описать магазинную память у автомата с магазинной памятью?
  answer: Магазинная память у автомата с магазинной памятью является стеком.
  author: Лисов Алексей

- question: Опиши алгоритм нахождения эпсилон замыкания для каждой из вершин автомата?
  answer: >
    ε-замыкание состояния q – это множество состояний, достижимых из q только по ε-переходам. 
    Соотсветственно эпсилон замыкание для каждой из вершин автомата можно предподсчитать с помощью поиска в глубину 
    (dfs) для каждой вершины.
  author: Лисов Алексей

- question: Дай определение произведения двух автоматов
  answer: >
    Прямым произведением двух ДКА A1=⟨Σ1,Q1,s1,T1,δ1⟩ и A2=⟨Σ2,Q2,s2,T2,δ2⟩ называется ДКА 
    A=⟨Σ,Q,s,T,δ⟩, где: 
    1) Σ = Σ1∪Σ2, то есть он работает над пересечением алфавитов двух данных автоматов 
    2) Q = Q1×Q2, множество пар состояниий включает в себя состояния обоих автоматов 
    3) s =⟨s1,s2), стартуем с символов в обоих автоматах 
    4) T=T1×T2, терминальные состояния включают в себя терминальные состояния обоих автоматов 
    5) δ(⟨q1,q2⟩,c)=⟨δ1(q1,c),δ2(q2,c)⟩, то есть переходим по символу в обоих автоматах"
  author: Лисов Алексей

- question: Как из недетерминированного конечного автомата A сделать pushdown automat B?
  answer: >
    Для этого нужно заменить переход из состояния q в состояние p по символу x на такой же переход, 
    только добавить z_0/z_0, где z_0 это дно стека. Из этого следует, что регулярные языки являются подмножеством 
    МП-автоматных языков (языков автоматов с магазинной памятью).
  author: Лисов Алексей

- question: Теорема Клини
  answer: >
    Теорема Клини гласит о том, что множество языков, принимаемых детерминированным конечным автоматом совпадает с 
    множеством языком, принимаемых академическим регулярным выражением.
  author: Лисов Алексей

- question: Какой язык называется префиксным (беспрефиксным)
  answer: > 
    Язык L называется префиксным, если для любого w не равного v из L не верно, что w – префикс v. Также такие языки
    называют беспрефиксными.
  author: Лисов Алексей

- question: >
    Что можно сказать о языке L, который принимается детерминированным конечным автоматом 
    с магазинной памятью по пустому стеку
  answer: > 
    Это значит, что язык L принимается детерминированным конечным автоматом с магазинной памятью по терминальному 
    состоянию, а также язык L – префиксный
  author: Лисов Алексей

- question: >
    Является ли регулярным язык Дика?
    (множество правильных скобочных структур вместе с пустой структурой, образующее язык над алфавитом {a,b}.)
  answer: > 
    Язык Дика не является регулярным.
    Докажем с помощью леммы о накачке. Предположим, что он регулярный, тогда по лемме о накачке существует 
    n с вышеописанными свойствами. Возьмём последовательность из n открывающих, а затем n закрывающих скобок. 
    Для неё существуют соответствующие x,y,z из леммы о накачке. Но так как |xy| <= n, то y 
    состоит только из открывающих скобок,  причём по условию леммы y не пустая. А значит при i = 2 в строке xy^iz 
    получится больше открывающих скобок, чем закрывающих, то есть это будет не правильной скобочной последовательностью. 
    Получили противоречие. Следовательно язык Дика не является регулярным.
  author: Лисов Алексей

- question: >
    Как реализуется алгоритм MemDFA для проверки принадлежности слова w к языку L в ДКА?
  answer: > 
    Обозначив head(aw) = a и tail(aw) = w для a ∈ Σ и w ∈ Σ*, алгоритм выглядит следующим образом: MemDFA[A](w, q) Вход: ДКА A = (Q, Σ, δ, q0, F), состояние q ∈ Q, слово w ∈ Σ* Выход: Возвращает true, если w ∈ L(q), иначе false 1. Если w = ε, то возвращает q ∈ F 2. Иначе возвращает Member[A](δ(q, head(w)), tail(w)) Сложность алгоритма: O(|w|)
  author: Шиятов Наиль

- question: >
    Как реализуется операция дополнения языка в ДКА?
  answer: > 
    Реализация операции дополнения для ДКА проста. Поскольку ДКА имеет единственный прогон для каждого слова, который принимается, если автомат достигает заключительного состояния, можно просто поменять местами заключительные и незаключительные состояния. Таким образом, если слово не принималось в исходном автомате, оно будет принято в дополненном автомате, и наоборот. Этот алгоритм имеет линейную сложность: \\textbf{CompDFA(A)} \\\\ \\textbf{Вход:} ДКА $A = (Q, \\Sigma, \\delta, q_0, F)$ \\\\ \\textbf{Выход:} ДКА $B = (Q', \\Sigma, \\delta', q'_0, F')$ с $L(B) = \\overline{L(A)}$ \\\\ \\begin{algorithmic}[1] \\STATE $Q' \\leftarrow Q$; $\\delta' \\leftarrow \\delta$; $q'_0 \\leftarrow q_0$; $F' \\leftarrow \\emptyset$ \\FORALL{$q \\in Q$} \\IF{$q \\notin F$} \\STATE добавить $q$ в $F'$ \\ENDIF \\ENDFOR \\end{algorithmic}
  author: Шиятов Наиль

- question: >
    Почему операция дополнения для ДКА сохраняет минимальность автомата?
  answer: > 
    Операция дополнения для ДКА сохраняет минимальность, потому что каждое состояние дополненного автомата $Comp(A)$ распознаёт дополнение языка, которое распознавало то же состояние в исходном автомате $A$. Если состояния исходного автомата $A$ распознают попарно разные языки, то и состояния автомата $Comp(A)$ также будут распознавать разные языки. Согласно следствию, ДКА минимален, если его состояния распознают различные языки.
  author: Шиятов Наиль

- question: >
    Какова цель и структура универсального алгоритма для выполнения бинарных булевых операций над языками, распознаваемыми ДКА?
  answer: > 
    Цель универсального алгоритма заключается в том, чтобы, принимая два ДКА, распознающих языки $L_1$ и $L_2$, и бинарную булевую операцию, возвращать ДКА, распознающий результат применения этой операции к языкам $L_1$ и $L_2$. Алгоритм обозначается как $BinOp[♢](A_1, A_2)$. \\textbf{BinOp[♢](A1, A2)} \\n \\textbf{Вход:} ДКА $A_1 = (Q_1, \\Sigma, \\delta_1, q_{01}, F_1)$, $A_2 = (Q_2, \\Sigma, \\delta_2, q_{02}, F_2)$ \\n \\textbf{Выход:} ДКА $A = (Q, \\Sigma, \\delta, Q_0, F)$ с $L(A) = L(A_1) \\; ♢ \\; L(A_2)$ \\n 1 $Q, \\delta, F \\leftarrow \\emptyset$ \\n 2 $q_0 \\leftarrow [q_{01}, q_{02}]$ \\n 3 $W \\leftarrow \\{q_0\\}$ \\n 4 \\textbf{while} $W \\neq \\emptyset$ \\textbf{do} \\n 5 \\quad pick $[q_1, q_2]$ from $W$ \\n 6 \\quad add $[q_1, q_2]$ to $Q$ \\n 7 \\quad \\textbf{if} $(q_1 \\in F_1) \\; ♢ \\; (q_2 \\in F_2)$ \\textbf{then} add $[q_1, q_2]$ to $F$ \\n 8 \\quad \\textbf{for all} $a \\in \\Sigma$ \\textbf{do} \\n 9 \\quad \\quad $q_{01} \\leftarrow \\delta_1(q_1, a)$; $q_{02} \\leftarrow \\delta_2(q_2, a)$ \\n 10 \\quad \\quad \\textbf{if} $[q_{01}, q_{02}] \\notin Q$ \\textbf{then} add $[q_{01}, q_{02}]$ to $W$ \\n 11 \\quad add $([q_1, q_2], a, [q_{01}, q_{02}])$ to $\\delta$
  author: Шиятов Наиль

- question: >
    Каково количество состояний у результирующего ДКА при выполнении бинарной булевой операции над двумя ДКА, и в каких случаях минимальность не сохраняется?
  answer: > 
    Выходной детерминированный конечный автомат (ДКА) от алгоритма $BinOp$ будет иметь $O(|Q_1| \\cdot |Q_2|)$ состояний, независимо от выполняемой булевой операции. Для демонстрации достижимости этого предела, можно рассмотреть алфавит $\\Sigma = \\{a\\}$ и язык $Mult_n$, который включает слова длиной, кратной $n$. Минимальный ДКА для языка $Mult_n$ представляет собой цикл из $n$ состояний, где начальное состояние также является единственным заключительным. Для любых двух взаимно простых чисел $n_1$ и $n_2$ выполняется равенство $Mult_{n_1} \\cap Mult_{n_2} = Mult(n_1 \\cdot n_2)$, что означает, что ДКА для $Mult(n_1 \\cdot n_2)$ будет иметь не менее $n_1 \\cdot n_2$ состояний. Однако в общем случае минимальность не сохраняется: произведение двух минимальных ДКА может не быть минимальным. Например, минимальный ДКА для регулярного языка $L \\cap L$ имеет одно состояние, в то время как результат построения произведения будет иметь то же количество состояний, что и минимальный ДКА для $L$.
  author: Шиятов Наиль

- question: >
    Как определяется, что ДКА принимает пустой язык, и какова сложность алгоритма проверки?
  answer: > 
    ДКА принимает пустой язык тогда и только тогда, когда у него нет заключительных состояний. Алгоритм $Empty(A)$ возвращает $true$, если множество заключительных состояний $F$ пусто, и $false$ в противном случае. Если в реализации используется булевая переменная для хранения информации о наличии заключительных состояний, то сложность алгоритма составляет $O(1)$. Если требуется выполнить линейный поиск по множеству состояний, чтобы проверить $F = \\emptyset$, то сложность будет $O(|Q|)$, где $|Q|$ — это количество состояний автомата.
  author: Шиятов Наиль

- question: >
    Как определяется, что ДКА принимает универсальный язык Σ∗, и какова сложность алгоритма проверки?
  answer: > 
    ДКА принимает универсальный язык $\\Sigma^*$ тогда и только тогда, когда все его состояния являются заключительными. Алгоритм $UnivDFA(A)$ возвращает $true$, если множество заключительных состояний $F$ совпадает с множеством всех состояний $Q$. Если автомат находится в нормальной форме, сложность алгоритма составляет $O(1)$. В противном случае сложность будет $O(|Q|)$, где $|Q|$ — это количество состояний автомата.
  author: Шиятов Наиль

- question: >
    Как алгоритм проверяет, что язык, распознаваемый одним ДКА, является подмножеством языка, распознаваемого другим ДКА?
  answer: > 
    Алгоритм проверяет, что язык $L(A_1)$, распознаваемый ДКА $A_1$, является подмножеством языка $L(A_2)$, распознаваемого ДКА $A_2$, с помощью построения параллельного автомата $[A_1, A_2]$. Для каждого состояния $[q_1, q_2]$ автомата проверяется, что если состояние $q_1$ заключительное в $A_1$ ($q_1 \\in F_1$), то $q_2$ также должно быть заключительным в $A_2$ ($q_2 \\in F_2$). Если найдено состояние, где $q_1 \\in F_1$, а $q_2 \\notin F_2$, алгоритм возвращает $false$, что означает, что $L(A_1) \\not\\subseteq L(A_2)$. В противном случае, если таких состояний не найдено, алгоритм возвращает $true$, подтверждая, что $L(A_1) \\subseteq L(A_2)$. Сложность алгоритма зависит от количества состояний и алфавита.
  author: Шиятов Наиль

- question: >
    Как проверяется равенство языков двух ДКА?
  answer: > 
    Равенство языков двух ДКА $L(A_1) = L(A_2)$ проверяется с помощью симметрической разности $L(A_1) \\Delta L(A_2)$. Если симметрическая разность пуста, то языки равны. Алгоритм $EqDFA$ модифицирует алгоритм $InclDFA$, проверяя, что для состояний $[q_1, q_2]$ выполняется одно из следующих условий: если $q_1 \\in F_1$ и $q_2 \\notin F_2$, или если $q_1 \\notin F_1$ и $q_2 \\in F_2$, то возвращается $false$, что означает, что языки не равны. В противном случае возвращается $true$.
  author: Шиятов Наиль

- question: >
    Какой альтернативный подход существует для проверки равенства двух ДКА, помимо алгоритма EqDFA?
  answer: > 
    Альтернативный подход заключается в минимизации двух ДКА $A_1$ и $A_2$, а затем проверке, являются ли они изоморфными. Проверка изоморфизма может быть пропущена, если применить алгоритм $CSR$ к объединению двух НКА $A_1 \\cup A_2$ и разделить состояния на блоки. Языки равны, если начальные состояния обоих автоматов находятся в одном блоке после завершения алгоритма.
  author: Шиятов Наиль

- question: >
    Какая сложность проверки равенства языков двух ДКА с использованием алгоритма Хопкрофта для вычисления CSR?
  answer: > 
    Если используется алгоритм Хопкрофта для вычисления CSR, то проверка равенства языков может быть выполнена за время $O(n \\log n)$, где $n$ — это сумма состояний автоматов $A_1$ и $A_2$.
  author: Шиятов Наиль

- question: >
    Какие два важных преимущества имеет алгоритм EqDFA по сравнению с минимизацией автоматов?
  answer: > 
    Первое преимущество заключается в том, что алгоритм $EqDFA$ работает \"на лету\" (on-the-fly), позволяя тестировать равенство языков, пока строятся автоматы $A_1$ и $A_2$, и останавливать работу при нахождении различий. Второе преимущество — это возможность модифицировать $EqDFA$ так, чтобы он возвращал свидетельство (witness), то есть слово, которое находится в симметрической разности $L(A_1)$ и $L(A_2)$, если языки не равны.
  author: Шиятов Наиль