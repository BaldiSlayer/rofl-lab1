[
  {
    "question": "Что такое ТФЯ?",
    "answer": "теория формальных языков"
  },
  {
    "question": "Что такое ДКА?",
    "answer": "детерминированный конечный автомат"
  },
  {
    "question": "Рекурсивные языки.",
    "answer": "Язык L называется рекурсивным, если L = L(M) для некоторой машины Тьюринга M, удовлетворяющей следующим условиям. 1. Если w принадлежит L, то M попадает в допускающее состояние (и, следовательно, останавливается). 2. Если w не принадлежит L, то M в конце концов останавливается, хотя и не попадает в допускающее состояние. МТ этого типа соответствует интуитивному понятию “алгоритма” — правильно определенной последовательности шагов, которая всегда заканчивается и приводит к некоторому ответу. Если мы рассматриваем язык L как “проблему”, то проблема L называется разрешимой, если она является рекурсивным языком. В противном случае проблема называется неразрешимой."
  },
  {
    "question": "Рекурсивно-перечислимые языки. Примеры языков, которые являются рекурсивно-перечислимыми, но не рекурсивными.",
    "answer": "Язык L является рекурсивно-перечислимым (РП-языком), если L = L(M) для некоторой машины Тьюринга M"
  },
  {
    "question": "Что такое язык диагонализации L_d",
    "answer": "Язык диагонализации Ld — это множество всех цепочек wi, не принадлежащих L(Mi)."
  },
  {
    "question": "Является ли язык Ld рекурсивно-перечислимым",
    "answer": "Язык Ld не является рекурсивно-перечислимым, т.е. не существует машины Тьюринга, которая допускала бы Ld.Доказательство. Допустим, что Ld = L(M) для некоторой МТ M. Так как Ld — язык надалфавитом {0, 1}, M должна содержаться в построенной нами последовательности машинТьюринга, поскольку эта последовательность содержит все МТ с входным алфавитом {0, 1}. Следовательно, в ней есть, по крайней мере, один код машины M, скажем, i, т.е. M = Mi. Выясним теперь, принадлежит ли wi языку Ld.Если wi принадлежит Ld, то Mi допускает wi Но тогда (по определению Ld) wi не принадлежит Ld, так как Ld содержит лишь такие wj для которых Mj не допускает wj Точно так же, если wi не принадлежит Ld, то Mi не допускает wi. Но тогда (по определению Ld) wi принадлежит Ld. Поскольку wi не может одновременно и принадлежать, и не принадлежать Ld, приходим к противоречию с нашим предположением о том, что M существует. Таким образом, Ld не является рекурсивно-перечислимым языком."
  },
  {
    "question": "Почему языки 'рекурсивные'?",
    "answer": "Современные программисты знакомы с понятием рекурсивной функции. Остается непонятным, что общего между рекурсивными функциями и машинами Тьюринга, которые всегда останавливаются. Еще хуже, что нерекурсивными, или неразрешимыми, называются языки, которые не распознаются никаким алгоритмом, хотя под “нерекурсивными” мы привыкли понимать вычисления настолько простые, что они не требуют обращений к рекурсивным функциям. Термин “рекурсивный” как синоним слова “разрешимый” возник в период развития математики, предшествовавший появлению компьютеров. В качестве понятия вычисления обычно использовались формализмы, основанные на рекурсии (но не итерации или цикле). В этих системах понятий (не рассматриваемых здесь) было нечто от вычислений в таких языках функционального программирования, как LISP или ML. В этом смысле выражение “проблема рекурсивна” означало, что она “проста настолько, что можно записать рекурсивную функцию, которая всегда приводит к ее решению за конечное число шагов”. И в наши дни применительно к машинам Тьюринга этот термин имеет в точности тот же смысл. Термин “рекурсивно-перечислимый” — из того же семейства понятий. С помощью некоторой функции элементы языка можно выписать в некотором порядке, т.е. “перечислить” их. Языки, элементы которых можно перечислить в некотором порядке, — это именно те языки, которые допускаются некоторой МТ (возможно, работающей бесконечно на недопустимых входах)."
  },
  {
    "question": "Почему все рекурсивные языки являются рекурсивно-перечислимыми, но не все рекурсивно-перечислимые языки являются рекурсивными.",
    "answer": "Чтобы доказать что язык является РП, но не рекурсивным, часто используется дополнение этого языка. Покажем, что рекурсивные языки замкнуты относительно дополнения. Поэтому, если язык L является РП, а его дополнение L` — нет, то L не может быть рекурсивным. Если бы L был рекурсивным, то L` также был бы рекурсивным, а следовательно, и РП. Докажем это важное свойство замкнутости рекурсивных языков. Теорема: Если L — рекурсивный язык, то язык L` также рекурсивен. Доказательство. Пусть L = L(M) для некоторой всегда останавливающейся МТ M. Построим МТ M , у которой L` = L( M ), т.е. M ведет себя так же, как и M; изменения касаются лишь допускающих состояний. 1. Допускающие состояния M становятся недопускающими состояниями M , не имеющими переходов, т.е. в этих состояниях M останавливается, не допуская. 2. M имеет новое допускающее состояние r, из которого нет переходов. 3. Для каждой комбинации из недопускающего состояния и ленточного символа M, в которой M не имеет перехода (т.е. останавливается, не допуская), добавляется переход в допускающее состояние r.  Поскольку M всегда останавливается, то всегда останавливается и M . Кроме того, M допускает множество именно тех цепочек, которые не допускаются M, т.е. L` ."
  },
  {
    "question": "Почему универсальный язык L_u является РП, но не рекурсивным.",
    "answer": "Язык Lu является РП. Допустим, что Lu рекурсивен. Тогда по теореме 9.3 L` u (дополнение Lu) — также рекурсивный язык. Но если существует МТ M, допускающая L` u, то, используя описанный ниже метод, можно построить МТ, допускающую Ld. Поскольку нам известно, что Ld не является РП, приходим к противоречию с предположением, что язык Lu является рекурсивным. Предположим, что L(M) = L` u. можно преобразовать МТ M в МТ M′, которая допускает Ld с помощью следующих действий1. M′ преобразует входную цепочку w в w111w. В качестве упражнения читатель может написать программу для выполнения этого шага на одной ленте. Однако легче это сделать, используя для копии w вторую ленту, и затем преобразовать двухленточную МТ в одноленточную. 2. M′ имитирует M на новом входе. Если w есть wi в нашем перечислении, то M′ определяет, допускает ли Mi вход wi. Поскольку M допускает L` u, то она допускает тогда и только тогда, когда Mi не допускает wi, т.е. когда wi принадлежит Ld. Таким образом, M′ допускает w тогда и только тогда, когда w принадлежит Ld. Поскольку по теореме 9.2 машины M′ не существует, приходим к выводу, что язык Lu не является рекурсивным."
  },
  {
    "question": "Является ли язык Lne РП/рекурсивным?",
    "answer": "Lne – непустой язык состоит из кодов всех машин Тьюринга, которые допускают хотя бы одну цепочку.   Он рекурсивно-перечислим, но не рекурсивным"
  },
  {
    "question": "Является ли язык Le РП/рекурсивным?",
    "answer": " Le – пустой язык состоит из кодов всех МТ, языки которых пусты. Он не рекурсивно-перечислим."
  },
  {
    "question": "Теорема Райса",
    "answer": "Всякое нетривиальное свойство РП-языков неразрешимо."
  },
  {
    "question": "Существует ли вход, при обработке которого МТ совершает более пяти переходов?",
    "answer": "Алгоритм решения становится очевидным,если заметить, что, когда МТ делает пять переходов, она обозревает не более девяти клеток вокруг начальной позиции головки. Поэтому можно проимитировать пять переходов МТ на любом из конечного числа входов, длина которых не более девяти. Если все эти имитации не достигают останова, то делается вывод, что на любом входе данная МТ совершает более пяти переходов"
  },
  {
    "question": "Что такое проблема соответствий Поста.",
    "answer": "Экземпляр проблемы соответствий Поста (ПСП) состоит из двух списков равной длины в некотором алфавите Σ. Как правило, мы будем называть их списками A и B, и писать A = w1, w2, …, wk и B = x1, x2, …, xk при некотором целом k. Для каждого i пара (wi, xi) называется парой соответствующих цепочек. Мы говорим, что экземпляр ПСП имеет решение, если существует последовательность из одного или нескольких целых чисел i1, i2, …, im, которая, если считать эти числа индексами цепочек и выбрать соответствующие цепочки из списков A и B, дает одну и ту же цепочку, т.е. wi1 wi2 …wim = xi1 xi2 …xim. В таком случае последовательность i1, i2, …, im называется решающей последовательностью, или просто решением, данного экземпляра ПСП"
  },
  {
    "question": "Что такое модифицированная проблема соответствий Поста. ",
    "answer": "Модифицированной проблемой соответствий Поста, или МПСП. В модифицированной ПСП на решение накладывается дополнительное требование, чтобы первой парой в решении была пара первых элементов списков A и B. Более формально, экземпляр МПСП состоит из двух списков A = w1, w2, …, wk и B = x1, x2, …, xk, и решением является последовательность из 0 или нескольких целых чисел i1, i2, …, im, при которой w1wi1wi2…wim = x1xi1xi2…xim. Отметим, что цепочки обязательно начинаются парой (w1, x1), хотя индекс 1 даже не указан в качестве начального элемента решения. Кроме того, в отличие от ПСП, решение которой содержит хотя бы один элемент, решением МПСП может быть и пустая последовательность (когда w1 = x1). Однако такие экземпляры не представляют никакого интереса и далее не рассматриваются."
  },
  {
    "question": "Разрешима ли ПСП/ проблема соответствий поста",
    "answer": "Проблема соответствий Поста неразрешима."
  },
  {
    "question": "Разрешим ли вопрос о неоднозначности КС-грамматики",
    "answer": "Вопрос о неоднозначности КС-грамматики неразрешим"
  },
  {
    "question": "Пусть G1 и G2 — КС-грамматики, а R — регулярное выражение. Тогда какие проблемы неразрешимы?",
    "answer": "Пусть G1 и G2 — КС-грамматики, а R — регулярное выражение. Тогда неразрешимы следующие проблемы: а) 'L(G1) I L(G2) = ∅ ?' б) 'L(G1) = L(G2) ?' в) 'L(G1) = L(R) ?'' г) верно ли, что L(G1) = T* для некоторого алфавита T ? д) 'L(G1) ⊆ L(G2) ?' е) 'L(R) ⊆ L(G1) ?'"
  },
  {
      "question": "Что такое переход машины Тьюринга?",
      "answer": "Переход машины Тьюринга — это функция, зависящая от состояния конечного управления и обозреваемого символа. За один переход машина Тьюринга должна выполнить следующие действия: изменить состояние, записать ленточный символ в обозреваемую клетку, сдвинуть головку влево или вправо."
  },
  {
      "question": "Какие языки допускаются при помощи машины Тьюринга?",
      "answer": "Языки, допустимые с помощью машины Тьюринга, называются рекурсивно перечислимыми, или РП-языками."
  },
  {
      "question": "Опишите прием «память в состоянии» машины Тьюринга.",
      "answer": "Память в состоянии - конечное управление можно использовать не только для представления позиции в «Программе» машины Тьюринга, но и для хранения конечного объема данных."
  },
  {
      "question": "Опишите прием «Подпрограммы» машины Тьюринга.",
      "answer": "Подпрограмма машины Тьюринга представляет собой множество состояний, выполняющее некоторый полезный процесс. Это множество включает в себя стартовое состояние и еще одно состояние, которое не имеет переходов и служит состоянием «возврата» для передачи управления какому-либо множеству состояний, вызвавшему данную подпрограмму. «Вызов» подпрограммы возникает везде, где есть переход в ее начальное состояние."
  },
  {
      "question": "Можно ли запомнить позицию ленточной головки в позиции управления у машины Тьюринга?",
      "answer": "Хотя позиции конечны в каждый момент времени, всё множество позиций может быть и бесконечным. Если состояние должно представлять любую позицию головки, то в состоянии должен быть компонент данных, имеющий любое целое в качестве значения. Из-за этого компонента множество состояний должно быть бесконечным, даже если только конечное число состояний используется в любой конечный момент времени. Определение же машин Тьюринга требует, чтобы множество состояний было конечным. Таким образом, запомнить позицию ленточной головки в конечном управлении нельзя."
  },
  {
      "question": "Что такое «счетчиковая машина»?",
      "answer": "«Счетчиковые машины» — это класс машин, обладающие возможностью запоминать конечное число целых чисел («счетчиков») и совершать различные переходы в зависимости от того, какие из счетчиков равны 0 (если таковые вообще есть). Счетчиковая машина может только прибавить 1 к счетчику или вычесть 1 из него, но отличить значения двух различных ненулевых счетчиков она не способна."
  },
  {
      "question": "Какой язык допускается счетчиковой машиной?",
      "answer": "Каждый язык, допускаемый счетчиковой машиной, рекурсивно перечислим. Причина в том, что счетчиковые машины являются частным случаем магазинных, а магазинные — частным случаем многоленточных машин Тьюринга, которые по теореме допускают только рекурсивно перечислимые языки."
  },
  {
      "question": "Допускается ли любой рекурсивно перечислимый язык двухсчетчиковой машиной?",
      "answer": "Для имитации машины Тьюринга и, следовательно, для допускания любого рекурсивно перечислимого языка, достаточно двух счетчиков. Для обоснования этого утверждения вначале доказывается, что достаточно трех счетчиков, а затем три счетчика имитируются с помощью двух."
  },
  {
      "question": "Что такое универсальная машина Тьюринга?",
      "answer": "Универсальной машиной Тьюринга называют машину Тьюринга, которая может заменить собой любую машину Тьюринга. Получив на вход программу и входные данные, она вычисляет ответ, который вычислила бы по входным данным машина Тьюринга, чья программа была дана на вход."
  },
  {
      "question": "Какое время необходимо многоленточной машины Тьюринга для имитации переходов компьютера?",
      "answer": "Выполнение n шагов работы компьютера можно проимитировать на одноленточной машине Тьюринга с использованием не более O(n^3) шагов."
  },
  {
      "question": "Что можно сказать о мощностях разных машин Тьюринга?",
      "answer": "Все виды машин Тьюринга, независимо от различий в их конструкции или правилах работы, обладают одинаковой вычислительной мощностью, то есть способны вычислить одни и те же классы функций. Это свойство называется тезисом Чёрча-Тьюринга. Оно гласит, что любая вычислимая функция может быть вычислена машиной Тьюринга. Различия между видами машин Тьюринга (например, между детерминированными и недетерминированными машинами, машинами с одним или несколькими лентами) могут повлиять на эффективность вычислений (время или пространство), но не на саму вычислительную мощность."
  },
  {
      "question": "Если проблема P1 неразрешима и ее можно свести к проблеме P2, то является ли проблема P2 неразрешимой?",
      "answer": "Если P1 можно свести к P2 и если P1 неразрешима, то и P2 неразрешима."
  },
  {
      "question": "Что такое рандомизированная машина Тьюринга?",
      "answer": "Рандомизированная машина Тьюринга — это вариант многоклеточной машины Тьюринга. Первая лента, как обычно для многоленточных машин, содержит вход. Вторая лента также начинается непустыми клетками. В принципе, вся она содержит символы 0 и 1, выбранные с вероятностью 1/2. Вторая лента называется случайной лентой. Третья и последующие, если используются, вначале пусты и при необходимости выступают как рабочие."
  },
  {
      "question": "Как формально определяется машина Тьюринга?",
      "answer": "Машина Тьюринга описывается семеркой компонентов: конечное множество состояний конечного управления; конечное множество входных символов; множество ленточных символов; функция переходов; начальное состояние, в котором управление находится в начале; пустой символ, или пробел, который не является входным; множество заключительных, или допускающих, состояний"
  },
  {
      "question": "Какие существуют приемы интерпретации ленты и конечного управления машины Тьюринга?",
      "answer": "Существует три приема интерпретации ленты и конечного управления машины Тьюринга: память в состоянии, многодорожечные ленты, подпрограммы."
  },
  {
      "question": "Опишите прием «Многодорожечные ленты» в машине Тьюринга.",
      "answer": "При использовании приема «Многодорожечные ленты» рассматривается лента машины Тьюринга, образованная несколькими дорожками. Каждая дорожка может хранить один символ (в одной клетке), и алфавит машины Тьюринга состоит из кортежей, с одним компонентом для каждой «дорожки»."
  },
  {
      "question": "Существуют ли не рекурсивно перечислимые языки, допускаемые многоленточными машинами Тьюринга?",
      "answer": "Каждый язык, допускаемый многоленточной машиной Тьюринга, рекурсивно перечислим."
  },
  {
      "question": "Какое время необходимо одноленточной машине Тьюринга для имитации перехода многоленточной машины Тьюринга?",
      "answer": "Время, необходимое одноленточной машине Тьюринга для имитации n переходов многоленточной машины Тьюринга, есть O(n^2))."
  },
  {
      "question": "Что такое «мультистековая (многомагазинная) машина»?",
      "answer": "Мультистековая (многомагазинная) машина представляет собой детерминированный МП-автомат с несколькими магазинами. Он получает свои входные данные, как и МП-автомат, из некоторого их источника, а не с ленты или из магазина, как машина Тьюринга. Мультистековая машина имеет конечное управление, то есть конечное множество состояний, и конечный магазинный алфавит, используемый для всех магазинов. Переход мультистековой машины основывается на состоянии, входном символе и верхних символах всех магазинов."
  },
  {
      "question": "Как называется язык, который допускается односчетчиковой машиной?",
      "answer": "Каждый язык, допускаемый односчетчиковой машиной, является КС-языком. Контекстно-свободный (КС) язык  — это язык, задаваемый контекстно-свободной грамматикой. Контекстно-свободной грамматикой  называется грамматика, у которой в левых частях всех правил стоят только одиночные нетерминалы."
  },
  {
      "question": "Можно ли имитировать машину Тьюринга на компьютере?",
      "answer": "Имитация машины Тьюринга на компьютере в принципе возможна, если допустить, что для имитации значащей части ленты существует потенциально бесконечный запас сменных запоминающих устройств вроде диска. Поскольку физические ресурсы, необходимые для создания дисков, конечны, данный довод сомнителен. Однако, поскольку пределы памяти Вселенной неизвестны или, без сомнения, обширны, предположение о бесконечности ресурсов (как для ленты машины Тьюринга) является практически реалистичным и в целом допустимо."
  },
  {
      "question": "Какое время необходимо одноленточной машине Тьюринга для имитации переходов компьютера?",
      "answer": "Машина Тьюринга может имитировать n шагов компьютера за O(n^6) своих шагов."
  },
  {
      "question": "Почему язык, допускающийся в недетерминированных машинах Тьюринга, также допускается и обычной детерминированной машиной Тьюринга?",
      "answer": "Несмотря на кажущуюся большую мощность недетерминированных машин в связи с тем, что они выполняют несколько возможных вычислений сразу (требуя только, чтобы хоть одно из них заканчивалось в допускающем состоянии), любой язык, допускающийся недетерминированной машиной Тьюринга, также допускается и обычной детерминированной машиной Тьюринга, поскольку она может моделировать любой недетерминированный переход, делая многократные копии состояния, если встречается неоднозначность."
  },
  {
      "question": "Как машина Тьюринга имитирует реальный компьютер?",
      "answer": "Машина Тьюринга может имитировать память и управление реального компьютера путем использования одной ленты для записи всех элементов памяти и их содержимого — регистров, основной памяти, дисков и других запоминающих устройств. Таким образом, можно быть уверенным, что все, не выполнимое машиной Тьюринга, не может быть сделано и компьютером."
  },
  {
      "question": "Если проблема P1 не рекурсивно-перечисляема и ее можно свести к проблеме P2, то является ли проблема P2 не рекурсивно-перечисляемой?",
      "answer": "Если P1 можно свести к P2 и если P1 не рекурсивно-перечисляема, то и P2 не рекурсивно-перечисляема."
  },
  {
      "question": "Какая проблема может возникнуть при допуске языка в рандомизированную машину Тьюринга?",
      "answer": "Имея дело с рандомизированными машинами Тьюринга, нужно быть более аккуратным с тем, что значит допускание входа такой машиной; становится возможным, что машина Тьюринга вообще не допускает никакого языка. Проблема в том, что при анализе действий рандомизированной машины Тьюринга со входом приходится рассматривать все возможные случайные последовательности на второй ленте. Вполне возможно, что машина Тьюринга допускает при одних случайных последовательностях, но отвергает при других; в действительности, если рандомизированная машина Тьюринга должна делать что-то более эффективно, чем детерминированная машина Тьюринга, то существенно, чтобы различные последовательности на рандомизированной ленте приводили к различному поведению."
  },
  {
    "question": "Определение фундированного множества",
    "answer": "Определение 1: Частично упорядоченное множество (A, ≤) называется фундированным, если в любом непустом подмножестве A есть минимальный элемент.  Определение 2: Частично упорядоченное множество (A, ≤) называется фундированным, если в нём нет бесконечных убывающих цепей, то есть в A нельзя выбрать бесконечную последовательность элементов a0, a1, a2, …, такую, что a0 > a1 > a2 > … > an > … Определение 3: Частично упорядоченное множество (A, ≤) называется фундированным, если для него выполняется принцип индукции: для любого свойства P(x) выполнено условие: [∀a ((∀a’ < a P(a’)) → P(a))] → (∀a P(a)). Три определения фундированного множества эквивалентны друг другу."
  },
  {
    "question": "Определение частично упорядоченного множество",
    "answer": "Множество A с заданным на нем частичным порядком R называется частично упорядоченным множеством и обозначается (A;R)"
  },
  {
    "question": "Что называется трансфинитной индукцией?",
    "answer": "Трансфинитная индукция — метод доказательства, обобщающий математическую индукцию на случай несчетного числа значений параметра. Трансфинитная индукция основана на следующем утверждении: пусть M — вполне упорядоченное множество, P(x) — некоторое утверждение для x из M. Если для любого x из M, из того, что P(y) истинно для всех y < x, следует, что верно P(x), и если P(x) верно для минимального элемента множества M, то утверждение P(x) верно для любого x из M."
  },
  {
    "question": "Что такое свободный моноид над множеством?",
    "answer": "Свободным моноидом M над множеством S (обозначается как MS) называется моноид над множеством S∗ — набором всевозможных последовательностей (или списков) конечной длины (в том числе и нулевой), образованных из элементов множества S — с ассоциативной операцией конкатенации ++ этих последовательностей."
  },
  {
    "question": "Какие существуют операции над языками в теории формальных языков?",
    "answer": "Теоретико-множественные операции: L ∪ M — объединение, L ∩ M — пересечение, L ∖ M — разность,  L̅ = Σ∗ ∖ L — дополнение. Конкатенация: LM = {αβ | α ∈ L, β ∈ M}. Конкатенация с обратным языком: LR⁻¹ = {w | ∃y ∈ R: wy ∈ L}; конкатенация с обратным словом: Ly⁻¹ = L{y}⁻¹, y ∈ Σ∗. Степень языка: L⁰ = {ε}, k = 0; Lᵏ = LLᵏ⁻¹, k > 0. Замыкание Клини: L∗ = ⋃i=0∞ Lⁱ. Гомоморфизм."
  },
  {
    "question": "Теорема Цермело",
    "answer": "Теорема (Цермело): На любом множестве A можно ввести такой порядок ≤, что множество (A, ≤) будет вполне упорядоченным."
  },
  {
	  "question": "Связь регулярных выражений и автоматов по Хопкрофту"
	  "answer": "Регулярные выражения описывают регулярные языки — класс языков, которые могут быть распознаны детерминированными или недетерминированными конечными автоматами (ДКА и НКА). В основе использования регулярных выражений лежит идея, что любой язык, который можно описать с помощью регулярных выражений, может быть распознан конечным автоматом."
	},
	{
	  "question": "Как использовать regex выражения в Python?"
	  "answer": "В Python есть модуль re, который предоставляет средства для работы с регулярными выражениями. Например, функции match(), search(), findall()"
	},
	{
	  "question": "Как использовать regex выражения в Java?"
	  "answer": "Java включает пакет java.util.regex, который поддерживает основные и продвинутые функции регулярных выражений, такие как группировка, кванторы и классы символов"
	},
	{
	  "question": "Как использовать regex выражения в JavaScript?"
	  "answer": "Встроенная поддержка регулярных выражений через объекты RegExp позволяет использовать регулярные выражения в строковых операциях, таких как match(), replace(), split()."
	},
	{
	  "question": "Как использовать regex выражения в C#"
	  "answer": "C# предоставляет класс Regex из пространства имен System.Text.RegularExpressions, который поддерживает работу с регулярными выражениями и возможности обработки текста."
	},
	{
	  "question": "Какие основные компоненты регулярных выражений?"
	  "answer": "Символы (простые символы (буквы, цифры) просто соответствуют самим себе), Мета-символы (специальные символы, которые имеют особое значение), Квантификаторы (указывают количество повторений), Группировка (скобки () используются для группировки выражений), Экранирование (использование \ ) "
	},
	{
	  "question": "Какие бывают квантификаторы в регулярных выражениях?"
	  "answer": " * это 0 или более повторений предыдущего символа, + это 1 или более повторений, ? это 0 или 1 повторение, {n} это точное количество повторений"
	},
	{
	  "question": "Что такое экранирование в регулярных выражениях?"
	  "answer": "Символы, такие как ., *, +, имеют специальное значение, но их можно использовать как обычные символы, если экранировать с помощью обратного слэша \."
	},
	{
	  "question": ""
	  "answer": ". — любой одиночный символ, ^ — начало строки, $ — конец строки, [] — набор символов, | — логическое ИЛИ "
	}
]
