from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.subexpression import Subexpression
from openapi_server import util

from openapi_server.models.subexpression import Subexpression  # noqa: E501


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lhs=None, rhs=None):  # noqa: E501
        """Rule - a model defined in OpenAPI

        :param lhs: The lhs of this Rule.  # noqa: E501
        :type lhs: Subexpression
        :param rhs: The rhs of this Rule.  # noqa: E501
        :type rhs: Subexpression
        """
        self.openapi_types = {
            'lhs': Subexpression,
            'rhs': Subexpression
        }

        self.attribute_map = {
            'lhs': 'lhs',
            'rhs': 'rhs'
        }

        self._lhs = lhs
        self._rhs = rhs

    @classmethod
    def from_dict(cls, dikt) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rule of this Rule.  # noqa: E501
        :rtype: Rule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lhs(self) -> Subexpression:
        """Gets the lhs of this Rule.


        :return: The lhs of this Rule.
        :rtype: Subexpression
        """
        return self._lhs

    @lhs.setter
    def lhs(self, lhs: Subexpression):
        """Sets the lhs of this Rule.


        :param lhs: The lhs of this Rule.
        :type lhs: Subexpression
        """
        if lhs is None:
            raise ValueError("Invalid value for `lhs`, must not be `None`")  # noqa: E501

        self._lhs = lhs

    @property
    def rhs(self) -> Subexpression:
        """Gets the rhs of this Rule.


        :return: The rhs of this Rule.
        :rtype: Subexpression
        """
        return self._rhs

    @rhs.setter
    def rhs(self, rhs: Subexpression):
        """Sets the rhs of this Rule.


        :param rhs: The rhs of this Rule.
        :type rhs: Subexpression
        """
        if rhs is None:
            raise ValueError("Invalid value for `rhs`, must not be `None`")  # noqa: E501

        self._rhs = rhs
