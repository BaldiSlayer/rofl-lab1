from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.constant_monomial import ConstantMonomial
from openapi_server.models.factor import Factor
from openapi_server.models.product_monomial import ProductMonomial
from openapi_server import util

from openapi_server.models.constant_monomial import ConstantMonomial  # noqa: E501
from openapi_server.models.factor import Factor  # noqa: E501
from openapi_server.models.product_monomial import ProductMonomial  # noqa: E501


class Monomial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factors=None, constant=None):  # noqa: E501
        """Monomial - a model defined in OpenAPI

        :param factors: The factors of this Monomial.  # noqa: E501
        :type factors: List[Factor]
        :param constant: The constant of this Monomial.  # noqa: E501
        :type constant: int
        """
        self.openapi_types = {
            'factors': List[Factor],
            'constant': int
        }

        self.attribute_map = {
            'factors': 'factors',
            'constant': 'constant'
        }

        self._factors = factors
        self._constant = constant

    @classmethod
    def from_dict(cls, dikt) -> 'Monomial':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Monomial of this Monomial.  # noqa: E501
        :rtype: Monomial
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factors(self) -> List[Factor]:
        """Gets the factors of this Monomial.


        :return: The factors of this Monomial.
        :rtype: List[Factor]
        """
        return self._factors

    @factors.setter
    def factors(self, factors: List[Factor]):
        """Sets the factors of this Monomial.


        :param factors: The factors of this Monomial.
        :type factors: List[Factor]
        """
        if factors is None:
            raise ValueError("Invalid value for `factors`, must not be `None`")  # noqa: E501
        if factors is not None and len(factors) < 1:
            raise ValueError("Invalid value for `factors`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._factors = factors

    @property
    def constant(self) -> int:
        """Gets the constant of this Monomial.


        :return: The constant of this Monomial.
        :rtype: int
        """
        return self._constant

    @constant.setter
    def constant(self, constant: int):
        """Sets the constant of this Monomial.


        :param constant: The constant of this Monomial.
        :type constant: int
        """
        if constant is None:
            raise ValueError("Invalid value for `constant`, must not be `None`")  # noqa: E501
        if constant is not None and constant < 1:  # noqa: E501
            raise ValueError("Invalid value for `constant`, must be a value greater than or equal to `1`")  # noqa: E501

        self._constant = constant
