from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.interpretation import Interpretation
from openapi_server.models.rule import Rule
from openapi_server import util

from openapi_server.models.interpretation import Interpretation  # noqa: E501
from openapi_server.models.rule import Rule  # noqa: E501


class Trs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variables=None, rules=None, interpretations=None):  # noqa: E501
        """Trs - a model defined in OpenAPI

        :param variables: The variables of this Trs.  # noqa: E501
        :type variables: List[str]
        :param rules: The rules of this Trs.  # noqa: E501
        :type rules: List[Rule]
        :param interpretations: The interpretations of this Trs.  # noqa: E501
        :type interpretations: List[Interpretation]
        """
        self.openapi_types = {
            'variables': List[str],
            'rules': List[Rule],
            'interpretations': List[Interpretation]
        }

        self.attribute_map = {
            'variables': 'variables',
            'rules': 'rules',
            'interpretations': 'interpretations'
        }

        self._variables = variables
        self._rules = rules
        self._interpretations = interpretations

    @classmethod
    def from_dict(cls, dikt) -> 'Trs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trs of this Trs.  # noqa: E501
        :rtype: Trs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variables(self) -> List[str]:
        """Gets the variables of this Trs.


        :return: The variables of this Trs.
        :rtype: List[str]
        """
        return self._variables

    @variables.setter
    def variables(self, variables: List[str]):
        """Sets the variables of this Trs.


        :param variables: The variables of this Trs.
        :type variables: List[str]
        """
        if variables is None:
            raise ValueError("Invalid value for `variables`, must not be `None`")  # noqa: E501
        if variables is not None and len(variables) < 1:
            raise ValueError("Invalid value for `variables`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._variables = variables

    @property
    def rules(self) -> List[Rule]:
        """Gets the rules of this Trs.


        :return: The rules of this Trs.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[Rule]):
        """Sets the rules of this Trs.


        :param rules: The rules of this Trs.
        :type rules: List[Rule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501
        if rules is not None and len(rules) < 1:
            raise ValueError("Invalid value for `rules`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._rules = rules

    @property
    def interpretations(self) -> List[Interpretation]:
        """Gets the interpretations of this Trs.


        :return: The interpretations of this Trs.
        :rtype: List[Interpretation]
        """
        return self._interpretations

    @interpretations.setter
    def interpretations(self, interpretations: List[Interpretation]):
        """Sets the interpretations of this Trs.


        :param interpretations: The interpretations of this Trs.
        :type interpretations: List[Interpretation]
        """
        if interpretations is None:
            raise ValueError("Invalid value for `interpretations`, must not be `None`")  # noqa: E501
        if interpretations is not None and len(interpretations) < 1:
            raise ValueError("Invalid value for `interpretations`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._interpretations = interpretations
