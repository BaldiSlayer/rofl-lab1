from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class FixRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trs=None, formal_trs=None, error=None):  # noqa: E501
        """FixRequest - a model defined in OpenAPI

        :param trs: The trs of this FixRequest.  # noqa: E501
        :type trs: str
        :param formal_trs: The formal_trs of this FixRequest.  # noqa: E501
        :type formal_trs: str
        :param error: The error of this FixRequest.  # noqa: E501
        :type error: str
        """
        self.openapi_types = {
            'trs': str,
            'formal_trs': str,
            'error': str
        }

        self.attribute_map = {
            'trs': 'trs',
            'formal_trs': 'formalTrs',
            'error': 'error'
        }

        self._trs = trs
        self._formal_trs = formal_trs
        self._error = error

    @classmethod
    def from_dict(cls, dikt) -> 'FixRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FixRequest of this FixRequest.  # noqa: E501
        :rtype: FixRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trs(self) -> str:
        """Gets the trs of this FixRequest.


        :return: The trs of this FixRequest.
        :rtype: str
        """
        return self._trs

    @trs.setter
    def trs(self, trs: str):
        """Sets the trs of this FixRequest.


        :param trs: The trs of this FixRequest.
        :type trs: str
        """
        if trs is None:
            raise ValueError("Invalid value for `trs`, must not be `None`")  # noqa: E501

        self._trs = trs

    @property
    def formal_trs(self) -> str:
        """Gets the formal_trs of this FixRequest.


        :return: The formal_trs of this FixRequest.
        :rtype: str
        """
        return self._formal_trs

    @formal_trs.setter
    def formal_trs(self, formal_trs: str):
        """Sets the formal_trs of this FixRequest.


        :param formal_trs: The formal_trs of this FixRequest.
        :type formal_trs: str
        """
        if formal_trs is None:
            raise ValueError("Invalid value for `formal_trs`, must not be `None`")  # noqa: E501

        self._formal_trs = formal_trs

    @property
    def error(self) -> str:
        """Gets the error of this FixRequest.


        :return: The error of this FixRequest.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this FixRequest.


        :param error: The error of this FixRequest.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error
