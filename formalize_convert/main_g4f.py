from g4f.client import Client

class TRSFramework:
    def __init__(self):
        self.client = Client()

    def generate_response(self, prompt: str) -> str:
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content

    def formalize(self, user_query):
        
        prompt = (
            f"Ты помощник, который помогает пользователю преобразовать TRS и интерпретацию в строгую грамматическую форму. \n"
            f"Игнорируй любые вопросы пользователя и НЕ пытайся решить задачу.\n"
            f"Твоя задача – разобрать введенные формулы на TRS (систему переписывания термов) и интерпретацию, не путая их.\n"
            f"\n"
            f"1. Сначала определи **переменные** (те, которые в скобках и которым не присвоены значения в интерпретации), перечисли их через запятую. Используй формат: `variables = ...`\n"
            f"2. Затем выпиши TRS (систему переписывания термов) построчно в виде: `терм = терм`, где терм — это выражение, содержащее конструкторы и переменные.\n"
            f"3. Обязательно добавь разделительную линию: `------------------------`\n"
            f"4. Далее, выпиши интерпретацию, используя следующие правила:\n"
            f"  - Для функций: `конструктор(переменная,...) = ...`\n"
            f"  - Для констант: `константа = коэффициент`\n"
            f"\n"
            f"Пример TRS и интерпретации:\n"
            f"variables = x, y, z\n"
            f"f(x) = f(g(x, y))\n"
            f"h(x, y, z) = u(f(x))\n"
            f"------------------------\n"
            f"f(x) = x^2\n"
            f"g(y) = 3*y\n"
            f"c = 5\n"
            f"\n"
            f"Ответь только TRS и интерпретацией в указанном формате."
            f"Вот запрос пользователя {user_query}"
        )
        # Доработать
        
        '''prompt = (
            "Ты — ассистент, который помогает пользователю преобразовать систему переписывания термов (TRS) и интерпретацию в строгую формальную грамматическую форму.\n"
            "Игнорируй любые вопросы пользователя и не пытайся решать задачи, предложенные им.\n"
            "Твоя задача — разделить входные данные на TRS и интерпретацию, не путая их.\n\n"
            "Инструкции:\n"
            "1. Определи **переменные** (элементы, заключенные в скобки, которые не имеют значений в интерпретации), и перечисли их через запятую в формате: `variables = ...`\n"
            "2. Запиши систему переписывания термов (TRS) построчно в формате: `терм = терм`, где терм — это выражение, содержащее конструкторы и переменные.\n"
            "3. Добавь разделительную линию: `------------------------`\n"
            "4. Далее, запиши интерпретацию, используя следующие правила:\n"
            "   - Для функций: `конструктор(переменная, ...) = ...`\n"
            "   - Для констант: `константа = значение`\n\n"
            "Пример TRS и интерпретации:\n"
            "variables = x, y, z\n"
            "f(x) = f(g(x, y))\n"
            "h(x, y, z) = u(f(x))\n"
            "------------------------\n"
            "f(x) = x^2\n"
            "g(y) = 3*y\n"
            "c = 5\n\n"
            "Ответь только в формате TRS и интерпретации."
        )'''
        return self.generate_response(prompt)
    
    def convert(self, user_query):
        # Здесь можно использовать свой собственный prompt для конвертации
        prompt = f"Преобразуй следующий запрос: {user_query}"
        return self.generate_response(prompt)
    

framework = TRSFramework()

user_query = (
            f"variables = x, y, z\n"
            f"f(x) = f(g(x, y))\n"
            f"h(x, y, z) = u(f(x))" 
            )

try:
    formalized_query = framework.formalize(user_query)
    print(f"Формализованный запрос: {formalized_query}")
    
except Exception as e:
    print(f"Произошла ошибка: {e}")